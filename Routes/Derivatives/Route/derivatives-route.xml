<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!--  ActiveMQ destinations to use  -->
    <!--
    We likely want to change to a queue.
    <bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg type="java.lang.String" value="${sidora.broker.topics}"/>
    </bean>
    -->

    <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
    <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
        <!-- <property name="brokerURL" value="${broker.url}"/> -->
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>

    <!-- Use a pooled connections for scalability -->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="maxConnections" value="8" />
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <!-- Use pooled connections for JMS -->
    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="concurrentConsumers" value="1"/>
        <!-- Until we choose our means of consuming this avoids duplication -->
        <!-- <property name="concurrentConsumers" value="10"/> -->
    </bean>

    <!-- Use the Camel JMS Components for performance and route flexibility -->
    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>

    <!-- Use the Camel AMQ component for performance -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>

    <bean id="modelAggregator" class="edu.si.services.fedorarepo.aggregators.ContentModelAggregationStrategy"/>
    
    <bean id="contentModels" class="java.util.HashSet"/>

    <!-- Provides the Camel routing setup -->
    <camelContext id="DerivativesCamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:atom="http://www.w3.org/2005/Atom"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:fs="info:fedora/fedora-system:def/model#"
                  xmlns:fedora-types="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fsmgmt="http://www.fedora.info/definitions/1/0/management/"
                  trace="false">
        
        <route id="DerivativesStartProcessing">
            <from uri="activemq:topic:fedora.apim.update"/>
            <log message="${id} Derivatives: Starting processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <log message="${id} Derivatives: Processing PID: ${headers.pid}  Method Name: ${headers.methodName}  Origin: {{si.fedora.user}}"/>
            <log message="${id} Derivatives: Processing BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            
            <!--
                The login used by the source of the message is put in the ATOM Author element by Fedora. Since this
                is a system login not a end-user, we can use this to identify the process that is the source of
                the message.
            -->

            <!-- Filter for messages coming from monitored processes. -->
            <filter>
                <xpath>/atom:entry/atom:author/atom:name = '{{si.fedora.user}}'</xpath>
                <log message="${id} Derivatives: No message processing required."/>
                <stop/>
            </filter>
            
            <!-- Filter out Fedora API methods that do not need derivatives processing. -->
            <filter>
                <simple>
                    ${headers.methodName} in &#39;addDatastream,modifyDatastreamByValue,modifyDatastreamByReference,modifyObject,ingest&#39;
                </simple>
                <log message="${id} Derivatives: Process Message."/>
                <to uri="direct:processDerivativesMessage"/>
            </filter>
            
            <log message="${id} Derivatives: Finished processing."/>
        </route>
        
        <route id="DerivativesProcessMessage">
            <from uri="direct:processDerivativesMessage"/>
            <log message="${id} Derivatives: Starting Derivatives Message processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            
            <!-- Get the PID of the FDO that was just operated upon. -->
            <log message="${id} Derivatives: PID: ${headers.pid}  Method Name: ${headers.methodName}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <setHeader headerName="CamelFedoraPid"><simple>${headers.pid}</simple></setHeader>

            <!-- Get the DSID from the Atom message if any. -->
            <setHeader headerName="DSID">
                <xpath resultType="java.lang.String">/atom:entry/atom:category[@scheme="fedora-types:dsID"]/@term</xpath>
            </setHeader>
            <log message="${id} Derivatives: Atom DSID: ${headers.DSID}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- Get the Content Models for the FDO and put them on a list. -->
            <to uri="fedora://getDatastreamDissemination?dsId=RELS-EXT&amp;exchangePattern=InOut"/>
            <convertBodyTo type="java.lang.String" charset="utf-8"/>
            <log message="${id} Derivatives: RELS-EXT: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <split strategyRef="modelAggregator">
                <xpath>//fs:hasModel/@rdf:resource</xpath>
                <log message="${id} Derivatives: Split Content Model. BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            </split>
            <log message="${id} Derivatives: Content Models: ${header.ContentModels}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            
            <choice>
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" process the image." -->
                    <spel>
                        #{(request.headers[ContentModels].contains('info:fedora/si:imageCModel') or
                          request.headers[ContentModels].contains('info:fedora/si:generalImageCModel')) and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Image." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesImage"/>
                </when>
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" process the image." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/si:fieldbookCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found PDF." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesPDF"/>
                </when>
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" process the image." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/si:datasetCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Dataset." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesDataset"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: No message processing required."/>
                </otherwise>
            </choice>
            
            <log message="${id} Derivatives: Finished Message processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessImage">
            <from uri="direct:processDerivativesImage"/>
            <log message="${id} Derivatives: Starting Image processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- Submit the file to FITS processing. -->
            <!-- We really should only make new derivatives if the image has changed. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- <to uri="direct://processDerivativesFITS"/> -->

            <!-- Get the MIME type from the datastream profile. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">/fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()</xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- Get the Image and write it into a file in the staging area. -->
            <!-- Write the file as a stream to save memory. -->
            <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
            <to uri="file://staging/"/>

            <!-- Filter content by image format. -->
            <choice>
                <when> <!-- If the image is a JPEG? -->
                    <simple>
                        ${header.dsMIME} == 'image/jpg' || ${header.dsMIME} == 'image/jpeg'
                    </simple>
                    <log message="${id} Derivatives: Found JPEG." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <!-- Make a JPEG2000 archival image and store it in the MASTER datastream. Make a thumbnail. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="direct:processDerivativesThumbnailator"/>
                    <!-- Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                    <!-- Delete the file from the staging area. -->
                </when>
                <when> <!-- If the image is a TIFF? -->
                    <simple>
                        ${header.dsMIME} == 'image/tiff' || ${header.dsMIME} == 'image/tif'
                    </simple>
                    <log message="${id} Derivatives: Found TIFF." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <!-- Make a JPEG and store it as a new version in the OBJ datastream. -->
                    <!-- Make a JPEG2000 archival image and store it in the IMAGE datastream. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="direct:processDerivativesThumbnailator"/>
                </when>
                <when> <!-- If the image is a JPEG2000? -->
                    <simple>
                        ${header.dsMIME} == 'image/jp2'
                    </simple>
                    <log message="${id} Derivatives: Found JPEG2000." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <!-- Convert the image to JPEG and store that in the DISPLAY datastream. Make a thumbnail. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <recipientList>
                        <simple>
                            exec:convert?args=${header.CamelFileNameProduced}%20${header.CamelFileNameProduced}.jpg
                        </simple>
                    </recipientList>
                    <choice>
                        <when> <!-- If the conversion succeeded, store the image? -->
                            <simple>${headers.CamelExecExitValue} == 0</simple>
                            <setBody>
                                <simple>
                                    ${header.CamelFileNameProduced}.jpg
                                </simple>
                            </setBody>
                            <to uri="reader:file"/>
                            <to uri="fedora:addDatastream?name=DISPLAY&amp;type=image/jpg&amp;group=M"/>
                            <to uri="direct:processDerivativesThumbnailator"/>
                        </when>
                        <otherwise>
                            <log message="${id} Derivatives: Unable to convert JP2 to JPG. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}" loggingLevel="ERROR"/>
                        </otherwise>
                    </choice>
                    <!-- Delete the file from the staging area. -->
                </when>
                <otherwise>
                    <!-- If the image is some other mime type just store it in the IMAGE datastream? -->
                    <log message="${id} Derivatives: Unsupported image type found. MIME: ${headers.dsMIME}" loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <!-- Delete the file from the staging area. -->
            <!-- Camel generates a unique name for the file but we need to clean out staging after things are done. -->
            
            <log message="${id} Derivatives: Finished Image processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessDataset">
            <from uri="direct:processDerivativesDataset"/>
            <log message="${id} Derivatives: Starting Dataset processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- Submit the file to FITS processing. -->
            <!-- We really should only make new derivatives if the OBJ has changed. -->
            <!-- Camel generates a unique name for the file but we need to clean out staging after things are done. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- <to uri="direct://processDerivativesFITS"/> -->

            <!-- Get the MIME type from the datastream profile. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">/fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()</xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- Filter content by dataset format. -->
            <choice>
                <when> <!-- If the content is Excel? -->
                    <simple>${header.dsMIME} == 'application/vnd.ms-excel'</simple>
                    <log message="${id} Derivatives: Found Excel." loggingLevel="DEBUG" logName="edu.si.derivatives"/>

                    <!-- Get the PDF and write it into a file in the staging area. -->
                    <!-- Write the file as a stream to save memory. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="file://staging/"/>

                    <!-- Convert to CSV -->
                    <!-- Add a CSV datastream to the object. -->
                </when>
                <when> <!-- If the content is a CSV? -->
                    <simple>${header.dsMIME} == 'text/csv'</simple>
                    <log message="${id} Derivatives: Found CSV." loggingLevel="DEBUG" logName="edu.si.derivatives"/>

                    <!-- Get the PDF and write it into a file in the staging area. -->
                    <!-- Write the file as a stream to save memory. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="file://staging/"/>

                    <!-- Add a CSV datastream to the object. -->
                </when>
                <otherwise>
                    <!-- If the image is some other mime type just store it in the IMAGE datastream? -->
                    <log message="${id} Derivatives: Not a Dataset. MIME: ${headers.dsMIME}"/>
                </otherwise>
            </choice>

            <!-- Delete the files from the staging area. -->

            <log message="${id} Derivatives: Finished Dataset processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessPDF">
            <from uri="direct:processDerivativesPDF"/>
            <log message="${id} Derivatives: Starting PDF processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>

            <!-- We really should make new derivatives only if OBJ has changed. -->
            <!-- Camel generates a unique name for the file but we need to clean it out of staging after things are done. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- <to uri="direct://processDerivativesFITS"/> -->

            <!-- Get the MIME type from the datastream profile. -->
            <!-- We should try the getDatastream more than once if it fails. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">/fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()</xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <choice>
                <when> <!-- If the content is a PDF? -->
                    <simple>${header.dsMIME} == 'application/pdf'</simple>
                    <log message="${id} Derivatives: Process PDF." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    
                    <!-- Get the PDF and write it into a file in the staging area. -->
                    <!-- Write the file as a stream to save memory. -->
                    <!-- We should try the getDatastreamDissemination more than once if it fails. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="file://staging/"/>

                    <!-- Consider Multicast for improved error handling. -->
                    <to uri="direct:processDerivativesThumbnailImage"/>
                    <to uri="direct:processDerivativesPDF2SWF"/>

                </when>
                <otherwise>
                    <!-- If the image is some other mime type just store it in the IMAGE datastream? -->
                    <log message="${id} Derivatives: Not a PDF. MIME: ${headers.dsMIME}" loggingLevel="DEBUG"  logName="edu.si.derivatives"/>
                </otherwise>
            </choice>

            <!-- Delete the files from the staging area. -->

            <log message="${id} Derivatives: Finished PDF processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessPDF2SWF">
            <from uri="direct:processDerivativesPDF2SWF"/>
            <log message="${id} Derivatives: Started PDF2SWF processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <!-- Create a Flash derivative to use with the Flexpaper viewer. -->
            <recipientList>
                <simple>
                    exec:pdf2swf?args=${header.CamelFileNameProduced}%20-o%20${header.CamelFileNameProduced}.swf
                </simple>
            </recipientList>
            <choice>
                <when>
                    <simple>${headers.CamelExecExitValue} == 0</simple>
                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.swf
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=OBJ.swf&amp;type=application/x-shockwave-flash&amp;group=M"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to convert PDF to SWF. PID: ${headers.CamelFedoraPid}  ${headers.CamelExecExitValue}" loggingLevel="ERROR"/>
                </otherwise>
            </choice>
            <log message="${id} Derivatives: Finished PDF2SWF processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessFITS">
            <from uri="direct:processDerivativesFITS"/>
            <log message="${id} Derivatives: Started FITS processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <!-- Create a FITS derivative. -->
            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileNameProduced}
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If FITS processing succeeded? -->
                    <simple>${headers.CamelExecExitValue} == 0</simple>
                    <!-- Get the mime-type from the FITS output. -->
                    <!-- This can get complicated so we take the simple approach first. -->
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id} Derivatives: FITS MIME: ${headers.FITSmimeType}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    </setHeader>
                    <log message="${id} Derivatives: Exec FITS. BODY: ${body}" loggingLevel="DEBUG" logName="edu.si.derivatives"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;group=X"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: FITS processing failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}" loggingLevel="ERROR"/>
                </otherwise>
            </choice>
            <log message="${id} Finished Derivatives FITS processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessThumbnailator">
            <from uri="direct:processDerivativesThumbnailator"/>
            <log message="${id} Derivatives: Started Thumbnailator processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <!-- Create a thumbnail derivative using the Thumnailator library. -->
            <to uri="thumbnailator:image?keepRatio=false&amp;size=(200,150)"/>
            <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M"/>
            <log message="${id} Derivatives: Finished Thumbnailator processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessThumbnailImage">
            <from uri="direct:processDerivativesThumbnailImage"/>
            <log message="${id} Derivatives: Started Thumbnail Image processing ..." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
            <!-- Create a thumbnail derivative using ImageMagick. -->
            <recipientList>
                <simple>
                    <!-- The arg tokenizer strips of the plus for profile.  This is unsolved. -->
                    <!-- exec:convert?args=${header.CamelFileNameProduced}%20-thumbnail%20200x150%20-colorspace%20RGB%20%2Bprofile%20${header.CamelFileNameProduced}.jpg -->
                    <!-- Convert only the first page since the PDF may have multiple pages. -->
                    exec:convert?args=${header.CamelFileNameProduced}[0] -thumbnail 200x150 -colorspace RGB ${header.CamelFileNameProduced}.jpg
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If the conversion succeeded, store the thumbnail image? -->
                    <simple>${headers.CamelExecExitValue} == 0</simple>
                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to create thumbnail image. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}" loggingLevel="ERROR"/>
                </otherwise>
            </choice>
            <log message="${id} Derivatives: Finished Thumbnail Image processing." loggingLevel="DEBUG" logName="edu.si.derivatives"/>
        </route>

    </camelContext>
    
</blueprint>
