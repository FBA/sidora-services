<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="vmf agt xs">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="/.."/>
		<xsl:choose>
			<xsl:when test="$input='Functioning'">
				<xsl:value-of select="'Camera Functioning'"/>
			</xsl:when>
			<xsl:when test="$input='Other Failure'">
				<xsl:value-of select="'Unknown Failure'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var3_MapTofgdc-std-001_1-1999_function">
		<xsl:param name="par0"/>
		<origin>
			<xsl:value-of select="string(number(string($par0/OriginatorName)))"/>
		</origin>
	</xsl:template>
	<xsl:template name="agt:var6_MapTofgdc-std-001_1-1999_function">
		<xsl:param name="par0"/>
		<title>
			<xsl:value-of select="string($par0/CameraSiteName)"/>
		</title>
	</xsl:template>
	<xsl:template name="agt:var9_MapTofgdc-std-001_1-1999_function">
		<xsl:param name="par0"/>
		<abstract>
			<xsl:value-of select="string($par0/CameraDeploymentNotes)"/>
		</abstract>
	</xsl:template>
	<xsl:template name="agt:var21_MapTofgdc-std-001_1-1999_function">
		<xsl:param name="par0"/>
		<edomv>
			<xsl:value-of select="string($par0/CameraID)"/>
		</edomv>
	</xsl:template>
	<xsl:template match="/">
		<metadata>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance">C:/Users/liuf/Documents/Sidora/CAMERA~1/AMAZON~1/fgdc-std-001-dot-1-1999/fgdc-std-001.1-1999.xsd</xsl:attribute>
			<idinfo>
				<citation>
					<citeinfo>
						<xsl:for-each select="CameraTrapDeployment">
							<xsl:variable name="var1_resultof_translate" select="translate('1', '1falseru0 ', 't')"/>
							<xsl:variable name="var2_resultof_equal" select="($var1_resultof_translate = 't')"/>
							<xsl:if test="string((string($var2_resultof_equal) != 'false')) != 'false'">
								<xsl:call-template name="agt:var3_MapTofgdc-std-001_1-1999_function">
									<xsl:with-param name="par0" select="."/>
								</xsl:call-template>
							</xsl:if>
						</xsl:for-each>
						<pubdate>Unpublished material</pubdate>
						<xsl:for-each select="CameraTrapDeployment">
							<xsl:variable name="var4_resultof_translate" select="translate('1', '1falseru0 ', 't')"/>
							<xsl:variable name="var5_resultof_equal" select="($var4_resultof_translate = 't')"/>
							<xsl:if test="string((string($var5_resultof_equal) != 'false')) != 'false'">
								<xsl:call-template name="agt:var6_MapTofgdc-std-001_1-1999_function">
									<xsl:with-param name="par0" select="."/>
								</xsl:call-template>
							</xsl:if>
						</xsl:for-each>
						<geoform>remote-sensing image</geoform>
						<xsl:for-each select="CameraTrapDeployment">
							<othercit>
								<xsl:value-of select="normalize-space(string(CameraDeploymentID))"/>
							</othercit>
						</xsl:for-each>
					</citeinfo>
				</citation>
				<descript>
					<xsl:for-each select="CameraTrapDeployment">
						<xsl:variable name="var7_resultof_translate" select="translate('1', '1falseru0 ', 't')"/>
						<xsl:variable name="var8_resultof_equal" select="($var7_resultof_translate = 't')"/>
						<xsl:if test="string((string($var8_resultof_equal) != 'false')) != 'false'">
							<xsl:call-template name="agt:var9_MapTofgdc-std-001_1-1999_function">
								<xsl:with-param name="par0" select="."/>
							</xsl:call-template>
						</xsl:if>
					</xsl:for-each>
					<purpose>See Project Objectives</purpose>
				</descript>
				<timeperd>
					<timeinfo>
						<rngdates>
							<xsl:for-each select="CameraTrapDeployment">
								<xsl:variable name="var10_resultof_cast" select="string(CameraDeploymentBeginDate)"/>
								<xsl:variable name="var11_resultof_substring_after" select="substring-after($var10_resultof_cast, '-')"/>
								<begdate>
									<xsl:value-of select="concat(concat(substring-before($var10_resultof_cast, '-'), substring-before($var11_resultof_substring_after, '-')), substring-after($var11_resultof_substring_after, '-'))"/>
								</begdate>
							</xsl:for-each>
							<xsl:for-each select="CameraTrapDeployment">
								<xsl:variable name="var12_resultof_cast" select="string(CameraDeploymentEndDate)"/>
								<xsl:variable name="var13_resultof_substring_after" select="substring-after($var12_resultof_cast, '-')"/>
								<enddate>
									<xsl:value-of select="concat(concat(substring-before($var12_resultof_cast, '-'), substring-before($var13_resultof_substring_after, '-')), substring-after($var13_resultof_substring_after, '-'))"/>
								</enddate>
							</xsl:for-each>
						</rngdates>
					</timeinfo>
					<current>observed</current>
				</timeperd>
				<status>
					<progress>In work</progress>
					<update>As needed</update>
				</status>
				<keywords>
					<theme>
						<themekt>None</themekt>
						<themekey>Camera Trap</themekey>
					</theme>
				</keywords>
				<taxonomy>
					<keywtax>
						<taxonkt>None</taxonkt>
						<taxonkey>multiple species</taxonkey>
					</keywtax>
					<taxoncls>
						<taxonrn>Kingdom</taxonrn>
						<taxonrv>Animal</taxonrv>
						<xsl:for-each select="(CameraTrapDeployment/ImageSequence/ResearcherIdentifications/Identification)[(translate('1', '1falseru0 ', 't') = 't')]">
							<xsl:variable name="var14_resultof_equal" select="(translate('1', '1falseru0 ', 't') = 't')"/>
							<taxoncl>
								<taxonrn>Species</taxonrn>
								<xsl:if test="string((string($var14_resultof_equal) != 'false')) != 'false'">
									<taxonrv>
										<xsl:value-of select="string(SpeciesScientificName)"/>
									</taxonrv>
								</xsl:if>
								<xsl:if test="string((string($var14_resultof_equal) != 'false')) != 'false'">
									<common>
										<xsl:value-of select="string(SpeciesCommonName)"/>
									</common>
								</xsl:if>
							</taxoncl>
						</xsl:for-each>
					</taxoncls>
				</taxonomy>
				<accconst>None</accconst>
				<useconst>None</useconst>
			</idinfo>
			<dataqual>
				<logic>None</logic>
				<xsl:for-each select="CameraTrapDeployment">
					<complete>
						<xsl:call-template name="vmf:vmf1_inputtoresult">
							<xsl:with-param name="input" select="string(CameraFailureDetails)"/>
						</xsl:call-template>
					</complete>
				</xsl:for-each>
				<lineage>
					<method>
						<methtype>Bait</methtype>
						<methodid>
							<methkt>None</methkt>
							<xsl:for-each select="CameraTrapDeployment">
								<methkey>
									<xsl:value-of select="string(Bait)"/>
								</methkey>
							</xsl:for-each>
						</methodid>
					</method>
					<method>
						<methtype>Feature</methtype>
						<methodid>
							<methkt>None</methkt>
							<xsl:for-each select="CameraTrapDeployment">
								<methkey>
									<xsl:value-of select="string(Feature)"/>
								</methkey>
							</xsl:for-each>
						</methodid>
					</method>
					<procstep>
						<procdesc>Proposed Camera Deployment Begin Date</procdesc>
						<xsl:for-each select="CameraTrapDeployment">
							<xsl:variable name="var15_resultof_cast" select="string(ProposedCameraDeploymentBeginDate)"/>
							<xsl:variable name="var16_resultof_substring_after" select="substring-after($var15_resultof_cast, '-')"/>
							<procdate>
								<xsl:value-of select="concat(concat(substring-before($var15_resultof_cast, '-'), substring-before($var16_resultof_substring_after, '-')), substring-after($var16_resultof_substring_after, '-'))"/>
							</procdate>
						</xsl:for-each>
					</procstep>
					<procstep>
						<procdesc>Proposed Camera Deployment End Date</procdesc>
						<xsl:for-each select="CameraTrapDeployment">
							<xsl:variable name="var17_resultof_cast" select="string(ProposedCameraDeploymentEndDate)"/>
							<xsl:variable name="var18_resultof_substring_after" select="substring-after($var17_resultof_cast, '-')"/>
							<procdate>
								<xsl:value-of select="concat(concat(substring-before($var17_resultof_cast, '-'), substring-before($var18_resultof_substring_after, '-')), substring-after($var18_resultof_substring_after, '-'))"/>
							</procdate>
						</xsl:for-each>
					</procstep>
				</lineage>
			</dataqual>
			<spref>
				<vertdef>
					<altsys>
						<altdatum>North American Vertical Datum of 1988</altdatum>
						<altunits>feet</altunits>
						<altenc>Explicit elevation coordinate included with horizontal coordinates</altenc>
					</altsys>
				</vertdef>
			</spref>
			<eainfo>
				<detailed>
					<enttyp>
						<enttypl>Camera Settings</enttypl>
						<enttypd>Camera Settings for the Deployment.</enttypd>
						<enttypds>Camera Trap Data Federation</enttypds>
					</enttyp>
					<attr>
						<attrlabl>Camera ID</attrlabl>
						<attrdef>The Unique identifier for the camera.</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<xsl:variable name="var19_resultof_translate" select="translate('1', '1falseru0 ', 't')"/>
									<xsl:variable name="var20_resultof_equal" select="($var19_resultof_translate = 't')"/>
									<xsl:if test="string((string($var20_resultof_equal) != 'false')) != 'false'">
										<xsl:call-template name="agt:var21_MapTofgdc-std-001_1-1999_function">
											<xsl:with-param name="par0" select="."/>
										</xsl:call-template>
									</xsl:if>
								</xsl:for-each>
								<edomvd>The Unique identifier for the camera.</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Image Resolution Setting</attrlabl>
						<attrdef>Image Resolution Setting</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(ImageResolutionSetting)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>Image Resolution Setting</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Detection Distance</attrlabl>
						<attrdef>Maximum distance at which a camera triggered, as tested during deployment, measured in meters</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(DetectionDistance)"/>
									</edomv>
								</xsl:for-each>
								<edomvd>Maximum distance at which a camera triggered, as tested during deployment, measured in meters</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Sensitivity Setting</attrlabl>
						<attrdef>Sensitivity setting for motion sensor</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(SensitivitySetting)"/>
									</edomv>
								</xsl:for-each>
								<edomvd>Sensitivity setting for motion sensor</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Quiet Period Setting</attrlabl>
						<attrdef>Time set as minimum break between triggers of the camera, measured in seconds</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(QuietPeriodSetting)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>Time set as minimum break between triggers of the camera, measured in seconds</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Actual Latitude</attrlabl>
						<attrdef>The actual latitude of the camera</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(ActualLatitude)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>The actual latitude of the camera</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Actual Longitude</attrlabl>
						<attrdef>The actual longitude of the camera</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(ActualLongitude)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>The actual longitude of the camera</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Proposed Latitude</attrlabl>
						<attrdef>The proposed latitude of the camera</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(ProposedLatitude)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>The proposed latitude of the camera</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
					<attr>
						<attrlabl>Proposed Longitude</attrlabl>
						<attrdef>The proposed longitude of the camera</attrdef>
						<attrdefs>Camera Trap Data Federation</attrdefs>
						<attrdomv>
							<edom>
								<xsl:for-each select="CameraTrapDeployment">
									<edomv>
										<xsl:value-of select="string(number(string(ProposedLongitude)))"/>
									</edomv>
								</xsl:for-each>
								<edomvd>The proposed longitude of the camera</edomvd>
								<edomvds>Camera Trap Data Federation Standard</edomvds>
							</edom>
						</attrdomv>
					</attr>
				</detailed>
			</eainfo>
			<metainfo>
				<metstdn>FGDC Biological Data Profile of the Content Standard for Digital Geospatial Metadata</metstdn>
				<metstdv>1999</metstdv>
			</metainfo>
		</metadata>
	</xsl:template>
</xsl:stylesheet>
