<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="tbf xs">
	<xsl:template name="tbf:tbf1_statusType">
		<xsl:param name="input" select="/.."/>
		<xsl:for-each select="$input/node()">
			<xsl:if test="not(boolean(self::text()))">
				<xsl:if test="not(boolean(self::*))">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:if>
			<xsl:if test="string(boolean(self::progress)) != 'false'">
				<xsl:variable name="var1_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var1_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::update)) != 'false'">
				<xsl:variable name="var2_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var2_resultof_cast"/>
				</xsl:element>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf2_themeType">
		<xsl:param name="input" select="/.."/>
		<xsl:for-each select="$input/node()">
			<xsl:if test="not(boolean(self::text()))">
				<xsl:if test="not(boolean(self::*))">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:if>
			<xsl:if test="string(boolean(self::themekt)) != 'false'">
				<xsl:variable name="var1_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var1_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::themekey)) != 'false'">
				<xsl:variable name="var2_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var2_resultof_cast"/>
				</xsl:element>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf3_T_keywtax">
		<xsl:param name="input" select="/.."/>
		<xsl:for-each select="$input/node()">
			<xsl:if test="not(boolean(self::text()))">
				<xsl:if test="not(boolean(self::*))">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:if>
			<xsl:if test="string(boolean(self::taxonkt)) != 'false'">
				<xsl:variable name="var1_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var1_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::taxonkey)) != 'false'">
				<xsl:variable name="var2_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var2_resultof_cast"/>
				</xsl:element>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf4_T_methodid">
		<xsl:param name="input" select="/.."/>
		<xsl:for-each select="$input/node()">
			<xsl:if test="not(boolean(self::text()))">
				<xsl:if test="not(boolean(self::*))">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:if>
			<xsl:if test="string(boolean(self::methkt)) != 'false'">
				<xsl:variable name="var1_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var1_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::methkey)) != 'false'">
				<xsl:variable name="var2_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var2_resultof_cast"/>
				</xsl:element>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf5_enttypType">
		<xsl:param name="input" select="/.."/>
		<xsl:for-each select="$input/node()">
			<xsl:if test="not(boolean(self::text()))">
				<xsl:if test="not(boolean(self::*))">
					<xsl:value-of select="."/>
				</xsl:if>
			</xsl:if>
			<xsl:if test="string(boolean(self::enttypl)) != 'false'">
				<xsl:variable name="var1_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var1_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::enttypd)) != 'false'">
				<xsl:variable name="var2_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var2_resultof_cast"/>
				</xsl:element>
			</xsl:if>
			<xsl:if test="string(boolean(self::enttypds)) != 'false'">
				<xsl:variable name="var3_resultof_cast" select="string(.)"/>
				<xsl:element name="{name(.)}" namespace="{namespace-uri(.)}">
					<xsl:value-of select="$var3_resultof_cast"/>
				</xsl:element>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<metadata>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance">C:/Users/liuf/Documents/Sidora/CAMERA~1/AMAZON~1/fgdc-std-001-dot-1-1999/fgdc-std-001.1-1999.xsd</xsl:attribute>
			<idinfo>
				<xsl:for-each select="metadata">
					<xsl:variable name="var1_resultof_first" select="idinfo/citation/citeinfo"/>
					<citation>
						<citeinfo>
							<origin>
								<xsl:value-of select="string(number(string($var1_resultof_first/origin)))"/>
							</origin>
							<pubdate>
								<xsl:value-of select="string($var1_resultof_first/pubdate)"/>
							</pubdate>
							<title>
								<xsl:value-of select="string($var1_resultof_first/title)"/>
							</title>
							<geoform>
								<xsl:value-of select="string($var1_resultof_first/geoform)"/>
							</geoform>
							<othercit>
								<xsl:value-of select="string($var1_resultof_first/othercit)"/>
							</othercit>
						</citeinfo>
					</citation>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<xsl:variable name="var2_resultof_first" select="idinfo/descript"/>
					<descript>
						<abstract>
							<xsl:value-of select="string($var2_resultof_first/abstract)"/>
						</abstract>
						<purpose>
							<xsl:value-of select="string($var2_resultof_first/purpose)"/>
						</purpose>
					</descript>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<xsl:variable name="var3_resultof_first" select="idinfo/timeperd"/>
					<xsl:variable name="var4_resultof_first" select="$var3_resultof_first/timeinfo/rngdates"/>
					<timeperd>
						<timeinfo>
							<rngdates>
								<begdate>
									<xsl:value-of select="string(number(string($var4_resultof_first/begdate)))"/>
								</begdate>
								<enddate>
									<xsl:value-of select="string(number(string($var4_resultof_first/enddate)))"/>
								</enddate>
							</rngdates>
						</timeinfo>
						<current>
							<xsl:value-of select="string($var3_resultof_first/current)"/>
						</current>
					</timeperd>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<status>
						<xsl:call-template name="tbf:tbf1_statusType">
							<xsl:with-param name="input" select="idinfo/status"/>
						</xsl:call-template>
					</status>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<keywords>
						<theme>
							<xsl:call-template name="tbf:tbf2_themeType">
								<xsl:with-param name="input" select="idinfo/keywords/theme"/>
							</xsl:call-template>
						</theme>
					</keywords>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<taxonomy>
						<keywtax>
							<xsl:call-template name="tbf:tbf3_T_keywtax">
								<xsl:with-param name="input" select="idinfo/taxonomy/keywtax"/>
							</xsl:call-template>
						</keywtax>
						<taxoncl>
							<taxonrn>Kingdom</taxonrn>
							<taxonrv>Animal</taxonrv>
							<common>Animal</common>
							<xsl:for-each select="idinfo/taxonomy/taxoncls/taxoncl">
								<taxoncl>
									<taxonrn>
										<xsl:value-of select="string(taxonrn)"/>
									</taxonrn>
									<taxonrv>
										<xsl:value-of select="string(taxonrv)"/>
									</taxonrv>
									<common>
										<xsl:value-of select="string(common)"/>
									</common>
								</taxoncl>
							</xsl:for-each>
						</taxoncl>
					</taxonomy>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<accconst>
						<xsl:value-of select="string(idinfo/accconst)"/>
					</accconst>
				</xsl:for-each>
				<xsl:for-each select="metadata">
					<useconst>
						<xsl:value-of select="string(idinfo/useconst)"/>
					</useconst>
				</xsl:for-each>
			</idinfo>
			<xsl:for-each select="metadata">
				<xsl:variable name="var5_resultof_first" select="dataqual"/>
				<dataqual>
					<logic>
						<xsl:value-of select="string($var5_resultof_first/logic)"/>
					</logic>
					<complete>
						<xsl:value-of select="string($var5_resultof_first/complete)"/>
					</complete>
					<lineage>
						<xsl:for-each select="$var5_resultof_first/lineage/method">
							<method>
								<methtype>
									<xsl:value-of select="string(methtype)"/>
								</methtype>
								<methodid>
									<xsl:call-template name="tbf:tbf4_T_methodid">
										<xsl:with-param name="input" select="methodid"/>
									</xsl:call-template>
								</methodid>
							</method>
						</xsl:for-each>
						<xsl:for-each select="$var5_resultof_first/lineage/procstep">
							<procstep>
								<procdesc>
									<xsl:value-of select="string(procdesc)"/>
								</procdesc>
								<procdate>
									<xsl:value-of select="string(number(string(procdate)))"/>
								</procdate>
							</procstep>
						</xsl:for-each>
					</lineage>
				</dataqual>
			</xsl:for-each>
			<xsl:for-each select="metadata">
				<xsl:variable name="var6_resultof_first" select="spref/vertdef/altsys"/>
				<spref>
					<vertdef>
						<altsys>
							<altdatum>
								<xsl:value-of select="string($var6_resultof_first/altdatum)"/>
							</altdatum>
							<altunits>
								<xsl:value-of select="string($var6_resultof_first/altunits)"/>
							</altunits>
							<altenc>
								<xsl:value-of select="string($var6_resultof_first/altenc)"/>
							</altenc>
						</altsys>
					</vertdef>
				</spref>
			</xsl:for-each>
			<xsl:for-each select="metadata">
				<eainfo>
					<detailed>
						<enttyp>
							<xsl:call-template name="tbf:tbf5_enttypType">
								<xsl:with-param name="input" select="eainfo/detailed/enttyp"/>
							</xsl:call-template>
						</enttyp>
						<xsl:for-each select="eainfo/detailed/attr">
							<xsl:variable name="var7_resultof_first" select="attrdomv/edom"/>
							<attr>
								<attrlabl>
									<xsl:value-of select="string(attrlabl)"/>
								</attrlabl>
								<attrdef>
									<xsl:value-of select="string(attrdef)"/>
								</attrdef>
								<attrdefs>
									<xsl:value-of select="string(attrdefs)"/>
								</attrdefs>
								<attrdomv>
									<edom>
										<edomv>
											<xsl:value-of select="string($var7_resultof_first/edomv)"/>
										</edomv>
										<edomvd>
											<xsl:value-of select="string($var7_resultof_first/edomvd)"/>
										</edomvd>
										<edomvds>
											<xsl:value-of select="string($var7_resultof_first/edomvds)"/>
										</edomvds>
									</edom>
								</attrdomv>
							</attr>
						</xsl:for-each>
					</detailed>
				</eainfo>
			</xsl:for-each>
			<xsl:for-each select="metadata">
				<xsl:variable name="var8_resultof_first" select="metainfo"/>
				<metainfo>
					<metstdn>
						<xsl:value-of select="string($var8_resultof_first/metstdn)"/>
					</metstdn>
					<metstdv>
						<xsl:value-of select="string(number(string($var8_resultof_first/metstdv)))"/>
					</metstdv>
				</metainfo>
			</xsl:for-each>
		</metadata>
	</xsl:template>
</xsl:stylesheet>
