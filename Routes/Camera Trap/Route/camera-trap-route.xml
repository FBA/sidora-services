<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <cm:property-placeholder id="system.placeholder" persistent-id="camel.blueprint"/>

    <bean id="pidAggregator" class="edu.si.services.fedorarepo.aggregators.PidAggregationStrategy"/>

    <bean id="noRootObject" class="java.lang.IllegalArgumentException">
        <argument value="CameraTrapIngest: Root object does not exist."/>
    </bean>
    
    <!--
        TODO: Add Deployment Metadata backport
    -->
    <!-- errorHandlerRef="ctingestErrorHandler" -->
    <camelContext id="CTIngestCamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:ri="http://www.w3.org/2001/sw/DataAccess/rf1/result" 
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  trace="false">
        
        <!--
          The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->
        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:system.placeholder,file:${karaf.home}/etc/system.properties"/>

        <!--
        <errorHandler id="ctingestErrorHandler" type="DefaultErrorHandler">
            <redeliveryPolicy maximumRedeliveries="20"
                              retryAttemptedLogLevel="WARN"
                              backOffMultiplier="2"
                              useExponentialBackOff="true"/>
        </errorHandler>
        -->

        <onException>
            <exception>java.net.ConnectException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="1000"
                              maximumRedeliveries="200"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <route id="CameraTrapStartProcessing">
            <from uri="file:Process?moveFailed=Error_CamelTrap&amp;delete=true"/>
            <log message="${id} CameraTrapIngest: Starting Camera Trap processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <!--If there is an issue with staging large archives we can can 'slow' down the route with delay below. -->
            <!--
            <delay>
                <constant>3000</constant>
            </delay>
            -->
            <log message="${id} CameraTrapIngest: Starting Extraction"/>
            <to uri="extractor:extract?location=CameraTrapData"/>
            <log message="${id} CameraTrapIngest: Finished Extraction"/>
            <transform>
                <simple>deployment_manifest.xml</simple>
            </transform>
            <to uri="reader:file?type=text"/>
            <to uri="validator:file:Input/schemas/DeploymentManifest.xsd"/>

            <!-- Add Schematron validation. -->
            <!-- <to uri="schematron://./Input/schemas/DeploymentManifest2014.sch"/> -->
            <!--
            <to uri="schematron:///home/davisda/Projects/sidora/sem/apache-servicemix-5.4.0/Input/schemas/DeploymentManifest2014.sch"/>
            <log message="${id} CameraTrapIngest: Schematron Validation Status - ${header.CamelSchematronValidationStatus}"
                 loggingLevel="INFO"/>
            -->
            <setHeader headerName="ManifestXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <to uri="direct:validatePackage"/>

            <!-- Add image count and filename check. -->

            <to uri="direct:processPackage"/>
            <log message="${id} CameraTrapIngest: Finished Camera Trap processing!"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapValidatePackage">
            <from uri="direct:validatePackage"/>
            <log message="${id} CameraTrapIngest: Starting Package validation ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <split>
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()
                </xpath>
                <log message="${id} CameraTrapIngest: Split Resource - ${body}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <setHeader headerName="ImageFileName">
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setHeader>
                <setHeader headerName="ImageSequenceID">
                    <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                        //ImageFileName[text()=$ImageFileName]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                    </xpath>
                </setHeader>
                <log message="${id} CameraTrapIngest: ImageSequenceID - ${header.ImageSequenceID}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <!-- This throws a java.io.FileNotFoundException if the file does not exist. -->
                <to uri="reader:file"/>
                <log message="${id} CameraTrapIngest: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <!-- We could check the count to see if its exact but its OK to have too many images. -->
            </split>

            <log message="${id} CameraTrapIngest: Finished Package validation."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessPackage">
            <from uri="direct:processPackage"/>
            <log message="${id} CameraTrapIngest: Starting Package processing..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="direct:processParents"/>
            <to uri="direct:processSite"/>

            <log message="${id} CameraTrapIngest: Finished Package processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessSite">
            <from uri="direct:processSite"/>
            <log message="${id} CameraTrapIngest: Starting Site processing... "
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Stash the parent PID which could be a Plot or a Sub-project. -->
            <setHeader headerName="ParentPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <log message="${id} CameraTrapIngest: Add Relation: Parent PID - ${header.ParentPID} Child PID - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
            <log message="${id} CameraTrapIngest: Add Relation: Status - ${header.CamelFedoraStatus}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <multicast>
                <to uri="direct:addManifestDataStream"/>
                <to uri="direct:addFGDCDataStream"/>
                <to uri="direct:processResources"/>
            </multicast>

            <log message="${id} CameraTrapIngest: Finished Site processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapAddManifestDataStream">
            <from uri="direct:addManifestDataStream"/>
            <log message="${id} CameraTrapIngest: Starting Manifest processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="fedora:addDatastream?name=MANIFEST&amp;type=text/xml&amp;group=M&amp;dsLabel=MANIFEST"/>

            <log message="${id} CameraTrapIngest: Finished Manifest processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapAddFGDCDataStream">
            <from uri="direct:addFGDCDataStream"/>
            <log message="${id} CameraTrapIngest: Starting FGDC processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="xslt:file:Input/xslt/amazon_map1.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map2.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map3.xsl"/>
            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=M&amp;dsLabel=FGDC%20Record"/>

            <log message="${id} CameraTrapIngest: Finished FGDC processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessResources">
            <from uri="direct:processResources"/>
            <log message="${id} CameraTrapIngest: Starting resource processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="SitePID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <log message="${id} CameraTrapIngest: Site PID - ${header.SitePID}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            
            <!-- This could be done as a Composed Message Processor -->
            <!-- There may be several kinds of resources with zero or more instances. -->
            <split strategyRef="pidAggregator">
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()|//ResearcherIdentifications[*]|//VolunteerIdentifications[*]
                </xpath>
                <log message="${id} CameraTrapIngest: Split Resource - ${body}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <setHeader headerName="ResourceName">
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setHeader>
                <choice>
                    <!-- If its a Researcher Identification resource? -->
                    <when>
                        <spel>
                            #{request.headers[ResourceName].contains('ResearcherIdentifications')}
                        </spel>
                        <to uri="direct:addResearcherResource"/>
                        <log message="${id} CameraTrapIngest: Created Researcher's observation resource."
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>
                    </when>
                    <!-- If its a Volunteer Identification resource? -->
                    <when>
                        <spel>
                            #{request.headers[ResourceName].contains('VolunteerIdentifications')}
                        </spel>
                        <to uri="direct:addVolunteerResource"/>
                        <log message="${id} CameraTrapIngest: Created Volunteer's observation resource"
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>
                    </when>
                    <!-- Else its an Image resource. -->
                    <otherwise>
                        <setHeader headerName="ImageSequenceID">
                            <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                                //ImageFileName[text()=$ResourceName]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                            </xpath>
                        </setHeader>
                        <log message="${id} CameraTrapIngest: ImageSequenceID - ${header.ImageSequenceID}"
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>
                        <to uri="direct:addImageResource"/>
                    </otherwise>
                </choice>
                <log message="${id} CameraTrapIngest: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
            </split>

            <!-- Add the RELS-EXT datastream in one operation to gain about 70% of the total efficiency. -->
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.SitePID}
                </simple>
            </setHeader>
            <to uri="velocity:file:Input/templates/CTSiteTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <log message="${id} CameraTrapIngest: Finished resource processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapAddImageResource">
            <from uri="direct:addImageResource"/>
            <log message="${id} CameraTrapIngest: Started Image processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="reader:file"/>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=image/jpeg&amp;group=M&amp;dsLabel=${header.ImageSequenceID}&amp;versionable=false"
                </simple>
            </recipientList>
            <!--<multicast>-->
            <to uri="direct:createThumbnail"/>
            <!-- <to uri="direct:createArchivalImage" /> -->
            <!-- We may also want a DISPLAY datastream. -->
            <!--</multicast>-->
            <to uri="velocity:file:Input/templates/CTImageResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
            <to uri="direct:addFITSDataStream"/>
            <to uri="direct:addMODSDataStream"/>

            <log message="${id} CameraTrapIngest: Finished Image processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddResearcherResource">
            <from uri="direct:addResearcherResource"/>
            <log message="${id} CameraTrapIngest: Starting Researcher's data processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="ResourceLabel">
                <simple>
                    researcher_observation.csv
                </simple>
            </setHeader>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <to uri="xslt:file:Input/xslt/researcher.xsl"/>
            <transform>
                <xpath>
                    //researcher/text()
                </xpath>
            </transform>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=${header.ResourceLabel}&amp;versionable=false"
                </simple>
            </recipientList>
            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <log message="${id} CameraTrapIngest: Finished Researcher's data processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddVolunteerResource">
            <from uri="direct:addVolunteerResource"/>
            <log message="${id} CameraTrapIngest: Starting Volunteer's data processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="ResourceLabel">
                <simple>
                    volunteer_observation.csv
                </simple>
            </setHeader>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <to uri="xslt:file:Input/xslt/volunteer.xsl"/>
            <transform>
                <xpath>
                    //researcher/text()
                </xpath>
            </transform>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=${header.ResourceLabel}&amp;versionable=false"
                </simple>
            </recipientList>
            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl" />
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <log message="${id} CameraTrapIngest: Finished Volunteer's data processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddFITSDataStream">
            <from uri="direct:addFITSDataStream"/>
            <log message="${id} CameraTrapIngest: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileAbsolutePath}
                </simple>
            </recipientList>
            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id} CameraTrapIngest: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>
                    </setHeader>
                    <log message="${id} CameraTrapIngest: Exec FITS. BODY: ${body}"
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id} CameraTrapIngest: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddMODSDataStream">
            <from uri="direct:addMODSDataStream"/>
            <log message="${id} CameraTrapIngest: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            
            <!-- Get the FITS XML and use XPATH to get the created date from it. -->
            <setHeader headerName="FITSCreatedDate">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //fits:fileinfo/fits:created[@toolname="Exiftool"]
                </xpath>
            </setHeader>
            
            <!--
            <log message="MODS FITS Created Date - ${header.FITSCreatedDate}"/>
            -->

            <!-- TODO - The Image ID has .JPG appended and we may want to make this consistent. -->
            
            <to uri="velocity:file:Input/templates/CTImageResourceMODSTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>

            <log message="${id} CameraTrapIngest: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapCreateThumbnailImage">
            <from uri="direct:createThumbnail"/>
            <log message="${id} CameraTrapIngest: Started creating thumbnail ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="thumbnailator:image?keepRatio=true&amp;size=(200,150)"/>
            <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>

            <log message="${id} CameraTrapIngest: Finished creating thumbnail."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapCreateArchivalImage">
            <from uri="direct:createArchivalImage"/>
            <log message="${id} CameraTrapIngest: Started creating archival image ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <!--
                NOTE: This is a JPEG 2000 and we are not doing it yet.
            
            <to uri="thumbnailator:image?quality=80%&amp;size=(2048,1536)"/>
            <to uri="file://CameraTrapOutput/resample"/>
            -->
            <log message="${id} CameraTrapIngest: Finished creating archival image."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessParents">
            <from uri="direct:processParents"/>
            <log message="${id} CameraTrapIngest: Started processing parents ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setBody>
                <simple>
                    {{si.ct.root}}
                </simple>
            </setBody>
            <!-- Check if the root exists, else quit. -->
            <to uri="direct:findObjectByPIDPredicate"/>
            <choice>
                <when>
                    <simple>
                        ${body} == 'true'
                    </simple>
                    <log message="${id} CameraTrapIngest: Root object exists."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            {{si.ct.root}}
                        </simple>
                    </setHeader>
                    <!-- Add the parents if needed. -->
                    <to uri="direct:processProject"/>
                    <to uri="direct:processSubproject"/>
                    <!-- Plot is optional. -->
                    <filter>
                        <xpath resultType="java.lang.String" headerName="ManifestXML">
                            boolean(//PlotName/text()[1])
                        </xpath>
                        <to uri="direct:processPlot"/>
                    </filter>
                </when>
                <otherwise>
                    <!-- Stop processing this deployment. -->
                    <log message="${id} CameraTrapIngest: Root object does not exist."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <throwException ref="noRootObject"/>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing parents."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapFindObject">
            <from uri="direct:findObject"/>
            <log message="${id} CameraTrapIngest: Started find object ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <log message="${id} CameraTrapIngest: Root: Label - ${header.CamelFedoraLabel}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <!--
                Set a header with the PID if found, empty string if not.
                We need to bring in two parameters for the route: The object label and the expected parent;
                <setBody><constant>SELECT ?a ?b ?c FROM &lt;#ri&gt; WHERE {?a ?b ?c}</constant></setBody>
            -->
            <setBody>
                <!--
                <simple>
                    select $o $title from &lt;#ri&gt; 
                    where  $title &lt;mulgara:is&gt; '${header.CamelFedoraLabel}' and
                           $o &lt;fedora-model:label&gt; $title and
                           &lt;info:fedora/${header.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; $o
                </simple>
                -->
                <!--
                <simple>
                    SELECT ?o ?title 
                    FROM &lt;#ri&gt;
                    WHERE
                    { 
                        ?o &lt;fedora-model:label&gt; '${header.CamelFedoraLabel}' .
                        &lt;info:fedora/${header.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; ?o .
                    }
                </simple>
                -->
                <!-- TODO - The query needs to also check directly along the parent axis since names are not unique. -->
                <simple>
                    SELECT ?o FROM &lt;#ri&gt;
                    WHERE
                    {
                        ?o &lt;fedora-model:label&gt; '${header.CamelFedoraLabel}' .
                    }
                </simple>
            </setBody>
            <log message="${id} CameraTrapIngest: Project Parent - ${body}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            
            <!--
            <setBody>
                <simple>
                    &lt;sparql xmlns="http://www.w3.org/2001/sw/DataAccess/rf1/result"&gt;
                        &lt;head&gt;
                            &lt;variable name="o"/&gt;
                        &lt;/head&gt;
                        &lt;results&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122557"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122564"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122571"/&gt;
                            &lt;/result&gt;
                        &lt;/results&gt;
                    &lt;/sparql&gt;
                </simple>
            </setBody>
            -->

            <log message="${id} CameraTrapIngest: Query Result - ${body}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <setHeader headerName="FoundObjectPID">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:o/@uri,'/')
                </xpath>
            </setHeader>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:o/@uri,'/')
                </xpath>
            </setBody>

            <log message="${id} CameraTrapIngest: Finished find object."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapFindObjectByPIDPredicate">
            <from uri="direct:findObjectByPIDPredicate"/>
            <log message="${id} CameraTrapIngest: Started find object by PID ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Return true in the body if the object exists for the PID, false if not. -->
            <setBody>
                <simple>
                    ASK FROM &lt;#ri&gt;
                    {
                    &lt;info:fedora/${body}&gt; ?p ?o .
                    }
                </simple>
            </setBody>
            <log message="${id} CameraTrapIngest: Find Query - ${body}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            <log message="${id} CameraTrapIngest: Find Query Result - ${body}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    /ri:sparql/ri:results/ri:result[1]/ri:k0/text()
                </xpath>
            </setBody>
            <log message="Find Object By PID - ${body}."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <log message="${id} CameraTrapIngest: Finished find object by PID."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessPlot">
            <from uri="direct:processPlot"/>
            <log message="${id} CameraTrapIngest: Started processing plot ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <log message="${id} CameraTrapIngest: Plot In: Label - ${header.CamelFedoraLabel}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Plot is optional and has no ID.  We can only use the label. -->
            <setHeader headerName="PlotLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //PlotName
                </xpath>
            </setHeader>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${header.CamelFedoraLabel}:${header.PlotLabel}
                </simple>
            </setHeader>
            <log message="${id} CameraTrapIngest: Plot: Label - ${header.CamelFedoraLabel}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject" />
            <log message="${id} CameraTrapIngest: Found Plot PID - ${header.FoundObjectPID}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <choice>
                <when>
                    <simple>
                        ${header.FoundObjectPID} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Plot does not exist"
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <!-- Stash the sub-project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create CT plot and add it as a sub-concept of the sub-project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT sub-project to the child CT plot -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=FGDC-CTPlot&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-CTPlot%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing plot as the current object. -->
                    <log message="${id} CameraTrapIngest: Plot already exists - ${body}."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing plot."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessSubproject">
            <from uri="direct:processSubproject"/>
            <log message="${id} CameraTrapIngest: Started processing subproject ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Look for the sub-project ID first and then the label. -->
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //SubProjectName
                </xpath>
            </setHeader>
            <log message="${id} CameraTrapIngest: Sub-project: Label - ${header.CamelFedoraLabel}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject" />
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Sub-project does not exist"
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <!-- Stash the Project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create CT sub-project and add it as a sub-concept of the project. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the sub-project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT project to the child CT sub-project -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-ResearchTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=FGDC-Research&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-Research%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing sub-project as the current object. -->
                    <log message="${id} CameraTrapIngest: Sub-project already exists - ${body}."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing subproject."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>
        
        <route id="CameraTrapProcessProject">
            <from uri="direct:processProject"/>
            <log message="${id} CameraTrapIngest: Started processing project ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Look for the project ID first and then the label. -->
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //ProjectName
                </xpath>
            </setHeader>
            <log message="${id} CameraTrapIngest: Label - ${header.CamelFedoraLabel}  Parent PID - ${header.CamelFedoraPid}."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject"/>
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Project does not exist."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <!-- Create CT project and add it as a sub-concept of the Camera Trap root object. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project. -->
                    <to uri="velocity:file:Input/templates/CTProjectTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT root object to the child CT project. -->
                    <to uri="fedora:hasConcept?parentPid={{si.ct.root}}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTProjectEAC-CPFTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=EAC-CPF&amp;type=text/xml&amp;group=X&amp;dsLabel=EAC-CPF&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing project as the current object. -->
                    <log message="${id} CameraTrapIngest: Project already exists - ${body}."
                         loggingLevel="INFO"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing project."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

    </camelContext>
</blueprint>