<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2015 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <cm:property-placeholder id="system.placeholder" persistent-id="camel.blueprint"/>

    <bean id="pidAggregator" class="edu.si.services.fedorarepo.aggregators.PidAggregationStrategy"/>

    <bean id="noRootObject" class="java.lang.IllegalArgumentException">
        <argument value="CameraTrapIngest: Root object does not exist."/>
    </bean>

    <bean id="noImageSequence" class="java.lang.IllegalArgumentException">
        <argument value="CameraTrapIngest: Image sequence does not exist."/>
    </bean>

    <bean id="validationFailure" class="java.lang.IllegalArgumentException">
        <argument value="CameraTrapIngest: Schematron validation failed."/>
    </bean>

    <bean id="cameraTrapRoutes" class="edu.si.services.beans.cameratrap.CameraTrapRouteBuilder"/>

    <bean id="velocityToolsHandler" class="edu.si.services.beans.velocityToolsHandler.VelocityToolsHandler"/>

    <bean id="saxonFactory" class="net.sf.saxon.TransformerFactoryImpl"/>

    <bean id="deploymentPkgValidator" class="edu.si.services.beans.cameratrap.DeploymentPackageValidator"/>

    <bean id="postValidationBean" class="edu.si.services.beans.cameratrap.PostValidationBean"/>

    <bean id="postValidationAggregatorStrategy" class="edu.si.services.beans.cameratrap.PostValidationAggregationStrategy"/>

    <!-- errorHandlerRef="ctingestErrorHandler" -->

    <camelContext id="CTIngestCamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:ri="http://www.w3.org/2001/sw/DataAccess/rf1/result"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
                  xmlns:dc="http://purl.org/dc/elements/1.1/"
                  trace="false" useMDCLogging="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.1.xsd">



        <!--
          The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->
        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:system.placeholder,file:${karaf.home}/etc/system.properties"/>

        <!--
        <errorHandler id="ctingestErrorHandler" type="DefaultErrorHandler">
            <redeliveryPolicy maximumRedeliveries="20"
                              retryAttemptedLogLevel="WARN"
                              backOffMultiplier="2"
                              useExponentialBackOff="true"/>
        </errorHandler>
        -->

        <routeBuilder ref="cameraTrapRoutes"/>

        <onException>
            <exception>java.net.ConnectException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="1000"
                              maximumRedeliveries="200"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <onException>
            <exception>java.io.FileNotFoundException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="1000"
                              maximumRedeliveries="5"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <!--
        <onException id="thumbnailError">
            <exception>javax.imageio.IIOException</exception>
            <redeliveryPolicy maximumRedeliveries="0"/>
            <continued>
                <constant>
                    true
                </constant>
            </continued>
        </onException>
        -->

        <route id="CameraTrapStartProcessing">
            <from uri="file:Process?delay=9000&amp;moveFailed=Error_CamelTrap&amp;delete=true&amp;maxMessagesPerPoll=1"/>
            <log message="${id} CameraTrapIngest: Starting Camera Trap processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Needed for the Velocity tools. -->
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>

            <!--If there is an issue with staging large archives we can can 'slow' down the route with delay below. -->
            <delay>
                <constant>6000</constant>
            </delay>

            <log message="${id} CameraTrapIngest: Starting Extraction"/>
            <to uri="extractor:extract?location=CameraTrapData"/>
            <log message="${id} CameraTrapIngest: Finished Extraction"/>
            <log message="${id} CameraTrapIngest: AbsolutePath - ${header.CamelFileAbsolutePath}"
                 loggingLevel="WARN"/>

            <threads poolSize="3" maxPoolSize="5">

                <transform>
                    <simple>deployment_manifest.xml</simple>
                </transform>
                <to uri="reader:file?type=text"/>

                <setHeader headerName="ManifestXML">
                    <simple>
                        ${body}
                    </simple>
                </setHeader>

                <!-- Validate against the XSD. -->
                <to uri="validator:file:Input/schemas/DeploymentManifest.xsd"/>

                <!-- Add Schematron validation. -->
                <!--
                <to uri="schematron:file:Input/schemas/DeploymentManifest2014.sch"/>
                <log message="${id} CameraTrapIngest: Schematron Validation Status - ${header.CamelSchematronValidationStatus}"
                     loggingLevel="INFO"/>
                <choice>
                    <when>
                        <simple>${in.header.CamelSchematronValidationStatus} == 'FAILED'</simple>
                        <log message="${id} CameraTrapIngest: Schematron Validation Status - ${header.CamelSchematronValidationStatus}"
                             loggingLevel="WARN"/>
                        <log message="${id} CameraTrapIngest: Schematron Validation Report -\n ${header.CamelSchematronValidationReport}"
                             loggingLevel="WARN"/>
                        <throwException ref="validationFailure"/>
                    </when>
                    <otherwise>
                        <log message="${id} CameraTrapIngest: Schematron validation succeeded."/>
                    </otherwise>
                </choice>
                -->
                <!-- Validate image count and check filenames. -->
                <to uri="direct:validatePackage"/>

                <!-- Process the deployment -->
                <to uri="direct:processPackage"/>

                <!-- Delay some time for Fedora to catch up with RI sync before starting post validation-->
                <log message="${id} CameraTrapIngest: Delaying for moment before starting the post ingest validation ..."
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <delay>
                    <constant>6000</constant>
                </delay>

                <!-- ================================================================= -->

                <setHeader headerName="jasonLog">
                    <simple>
                        === JASON ===
                    </simple>
                </setHeader>

                <!-- ================================================================= -->

                <log message="${header.jasonLog} ((((((((((((((((going to validateIngest)))))))))))))))\n$Body:\n${body}\n\nHeaders:\n${headers}"
                     loggingLevel="WARN"
                     logName="edu.si.ctingest"/>


                <!-- Validate image count and check filenames. -->
                <to uri="direct:validateIngest"/>

                <log message="${header.jasonLog} ((((((((((((((((going to postValidateIngest)))))))))))))))\n$Body:\n${body}\n\nHeaders:\n${headers}"
                     loggingLevel="WARN"
                     logName="edu.si.ctingest"/>

                <!-- Validate Post Ingest Datastream Metadata Fields -->
                <to uri="direct:postValidateIngest"/>

            </threads>

            <log message="${id} CameraTrapIngest: Finished Camera Trap processing!"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapValidatePackage">
            <from uri="direct:validatePackage"/>
            <log message="${id} CameraTrapIngest: Starting Package validation ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="ResourceFileType">
                <simple resultType="java.lang.String">
                    .JPG, .JPEG
                </simple>
            </setHeader>
            <setHeader headerName="ResourceCount">
                <xpath resultType="java.lang.Integer">
                    count(//ImageFileName)
                </xpath>
            </setHeader>
            <to uri="bean:deploymentPkgValidator?method=validateResourceCount"/>
            <!--  Keeping the validator result in the header to allow the rest of the validation to go through and raise exception at the end of route. -->
            <setHeader headerName="ValidateResourceCountResult">
                <simple resultType="java.lang.Integer">
                    ${body}
                </simple>
            </setHeader>

            <split>
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()
                </xpath>
                <log message="${id} CameraTrapIngest: Split Resource - ${body}"
                     loggingLevel="DEBUG"
                     logName="edu.si.ctingest"/>
                <setHeader headerName="ImageFileName">
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setHeader>
                <setHeader headerName="ImageSequenceID">
                    <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                        //ImageFileName[text()=$ImageFileName]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                    </xpath>
                </setHeader>
                <log message="${id} CameraTrapIngest: ImageSequenceID - ${header.ImageSequenceID}"
                     loggingLevel="DEBUG"
                     logName="edu.si.ctingest"/>
                <!-- This throws a java.io.FileNotFoundException if the file does not exist. -->
                <to uri="reader:file"/>
                <log message="${id} CameraTrapIngest: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="DEBUG"
                     logName="edu.si.ctingest"/>
                <!-- We should check the image count to see if it exactly matches the image file count. -->
            </split>
            <!-- This throws custom exception when the resource count validator was unsuccessful. -->
            <choice>
                <when>
                    <simple>${header.ValidateResourceCountResult} == '0'</simple>
                    <throwException exceptionType="edu.si.services.beans.cameratrap.DeploymentPackageException"
                                    message="The resource counts do not match - extra resource(s) found in the file system than manifest"/>
                </when>
                <when>
                    <simple>${header.ValidateResourceCountResult} == '-1'</simple>
                    <throwException exceptionType="edu.si.services.beans.cameratrap.DeploymentPackageException"
                                    message="The resource counts do not match - less resource(s) found in the file system than manifest"/>
                </when>
            </choice>
            <log message="${id} CameraTrapIngest: Finished Package validation."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapValidateIngest">
            <from uri="direct:validateIngest"/>

            <log message="${id} CameraTrapIngest: Starting Post validation ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- RELS-EXT Resource reference count for validation.  The number includes the observation resource objs-->
            <setHeader headerName="RelsExtResourceCount">
                <xpath resultType="java.lang.String">
                    count(/rdf:RDF/rdf:Description/fedora:hasResource)
                </xpath>
            </setHeader>
            <to uri="direct:validatePostResourceCount"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${headers.SitePID}
                </simple>
            </setHeader>

            <log message="${header.jasonLog} (((((((((((((((( validateIngest (0) )))))))))))))))\n$Body:\n${body}\n\nHeaders:\n${headers}"
                 loggingLevel="WARN"
                 logName="edu.si.ctingest"/>

            <to uri="fedora://getDatastreamDissemination?dsId=RELS-EXT&amp;exchangePattern=InOut"/>

            <!-- Configurable max redelivery attempt for the Resource OBJ RI search validation-->
            <setHeader headerName="ValidationMaxRedeliveryAttempt">
                <simple resultType="java.lang.Integer">
                    5
                </simple>
            </setHeader>

            <split streaming="true">
                <xtokenize>//fedora:hasResource</xtokenize>
                <!-- Stashing the PID in the header in case of RI search redelivery attempts for later use-->
                <setHeader headerName="ValidationPID">
                    <xpath resultType="java.lang.String">
                        //fedora:hasResource/@rdf:resource/substring-after(., 'info:fedora/')
                    </xpath>
                </setHeader>
                <!-- Counter to track the number of retry attempts for RI search validation-->
                <setHeader headerName="ValidationRedeliveryCounter">
                    <simple resultType="java.lang.Integer">
                        0
                    </simple>
                </setHeader>
                <!-- Configurable delay for each Resource OBJ RI search validation attempts-->
                <setHeader headerName="ValidationRedeliveryDelay">
                    <simple resultType="java.lang.Integer">
                        2000
                    </simple>
                </setHeader>

                <to uri="direct:validateFedoraResource"/>
                <log message="${id} CameraTrapIngest: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
            </split>

            <log message="${id} CameraTrapIngest: Finished Post validation"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessPackage">
            <from uri="direct:processPackage"/>
            <log message="${id} CameraTrapIngest: Starting Package processing..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="direct:processParents"/>
            <to uri="direct:processSite"/>

            <log message="${id} CameraTrapIngest: Finished Package processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessSite">
            <from uri="direct:processSite"/>
            <log message="${id} CameraTrapIngest: Starting Site processing... "
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Stash the parent PID which could be a Plot or a Sub-project. -->
            <setHeader headerName="ParentPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //CameraSiteName
                </xpath>
            </setHeader>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <log message="${id} CameraTrapIngest: Add Relation: Parent PID - ${header.ParentPID} Child PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
            <log message="${id} CameraTrapIngest: Add Relation: Status - ${header.CamelFedoraStatus}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <multicast>
                <to uri="direct:addManifestDataStream"/>
                <to uri="direct:addFGDCDataStream"/>
                <to uri="direct:processResources"/>
            </multicast>

            <log message="${id} CameraTrapIngest: Finished Site processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddManifestDataStream">
            <from uri="direct:addManifestDataStream"/>
            <log message="${id} CameraTrapIngest: Starting Manifest processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="fedora:addDatastream?name=MANIFEST&amp;type=text/xml&amp;group=M&amp;dsLabel=MANIFEST"/>

            <log message="${id} CameraTrapIngest: Finished Manifest processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddFGDCDataStream">
            <from uri="direct:addFGDCDataStream"/>
            <log message="${id} CameraTrapIngest: Starting FGDC processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <to uri="xslt:file:Input/xslt/amazon_map1.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map2.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map3.xsl"/>
            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=M&amp;dsLabel=FGDC%20Record"/>

            <!--<to uri="direct:validateFGDCFields"/>-->

            <log message="${id} CameraTrapIngest: Finished FGDC processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessResources">
            <from uri="direct:processResources"/>
            <log message="${id} CameraTrapIngest: Starting resource processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="SitePID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="ImageCount">
                <xpath resultType="java.lang.String">
                    count(//ImageFileName)
                </xpath>
            </setHeader>
            <log message="${id} CameraTrapIngest: Site PID - ${header.SitePID}  Image Count - ${header.ImageCount}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <split strategyRef="pidAggregator">
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()
                </xpath>
                <log message="${id} CameraTrapIngest: Split Resource - ${body}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <setBody>
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setBody>
                <to uri="direct:addImageResource"/>
                <log message="${id} CameraTrapIngest: Created Image Resource - ${body}."
                     loggingLevel="DEBUG"
                     logName="edu.si.ctingest"/>
                <log message="${id} CameraTrapIngest: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
            </split>

            <!-- There is only one observation resource of each kine and all the observations are aggregated. -->
            <to uri="direct:addResearcherResource"/>
            <to uri="direct:addVolunteerResource"/>

            <!-- Add the RELS-EXT datastream in one operation to gain about 70% of the total efficiency. -->
            <to uri="velocity:file:Input/templates/CTSiteTemplate.vsl"/>
            <recipientList>
                <simple>
                    fedora:addDatastream?pid=${header.SitePID}&amp;name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false
                </simple>
            </recipientList>

            <log message="${id} CameraTrapIngest: Finished resource processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddImageResource" trace="true">
            <from uri="direct:addImageResource"/>
            <log message="${id} CameraTrapIngest: Started Image processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="ImageID">
                <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/ImageId/text()
                </xpath>
            </setHeader>
            <!-- Image Sequence ID used in MODS datastream. -->
            <setHeader headerName="ImageSequenceID">
                <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                </xpath>
            </setHeader>
            <!--
            <setHeader headerName="ImageSequenceIndex">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    count(//Image/ImageId[.=$ImageID]/../preceding-sibling::Image)
                </xpath>
            </setHeader>
            -->
            <!--
            <setHeader headerName="ImageSequenceIndex">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    substring-after($ImageID,concat($ImageSequenceID,'i'))
                </xpath>
            </setHeader>
            -->
            <!--
                This is a fix to deal with a change made to the backlog CT ImageID format.  It will fail if there are
                two or more 'i' characters in the ImageID.
            -->
            <setHeader headerName="ImageSequenceIndex">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    substring-after($ImageID,'i')
                </xpath>
            </setHeader>
            <choice>
                <when>
                    <simple>
                        ${header.ImageSequenceIndex} == ''
                    </simple>
                    <!-- Stop processing this deployment. -->
                    <log message="${id} CameraTrapIngest: Image sequence does not exist."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                    <throwException ref="noImageSequence"/>
                </when>
            </choice>

            <setHeader headerName="ImageSequenceCount">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    count(//Image[../ImageSequenceId=$ImageSequenceID])
                </xpath>
            </setHeader>
            <log message="${id} CameraTrapIngest: Label - ${body}  ImageID - ${header.ImageID}  ImageSequenceIndex - ${header.ImageSequenceIndex}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <log message="${id} CameraTrapIngest: Label - ${body}  ImageSequenceID - ${header.ImageSequenceID}  ImageSequenceCount - ${header.ImageSequenceCount}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="reader:file"/>
            <recipientList>
                <simple>
                    fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=${header.ImageID}
                </simple>
            </recipientList>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=image/jpeg&amp;group=M&amp;dsLabel=${header.ImageID}&amp;versionable=false
                </simple>
            </recipientList>
            <!--<multicast>-->
            <to uri="direct:createThumbnail"/>
            <!-- <to uri="direct:createArchivalImage" /> -->
            <!-- We may also want a DISPLAY datastream. -->
            <!--</multicast>-->
            <to uri="velocity:file:Input/templates/CTImageResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
            <to uri="direct:addFITSDataStream"/>
            <to uri="direct:addMODSDataStream"/>

            <!-- The current route only handles JPG. -->
            <choice>
                <!-- If the image is a JPEG? Do nothing. -->
                <when>
                    <simple>
                        ${header.dsMIME} == 'image/jpg' || ${header.dsMIME} == 'image/jpeg' || ${header.dsMIME} == 'image/jpe'
                    </simple>
                    <log message="${id} Derivatives: Found JPEG."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                </when>
                <!-- Just warn for now. -->
                <otherwise>
                    <log message="${id} Derivatives: Found non-JPEG Image."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished Image processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddResearcherResource">
            <from uri="direct:addResearcherResource"/>
            <log message="${id} CameraTrapIngest: Starting Researcher's data processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- When there are Researcher observations. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=Researcher%20Observations"/>
            <log message="Research Observation Resource PID - ${header.CamelFedoraPid}"
                    loggingLevel="DEBUG"
                    logName="edu.si.ctingest"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="xslt:file:Input/xslt/researcher.xsl"/>
            <transform>
                <xpath>
                    //researcher/text()
                </xpath>
            </transform>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=Researcher%20Observations&amp;versionable=false"
                </simple>
            </recipientList>
            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <setHeader headerName="ResourceCount">
                <simple>${header.ResourceCount}++</simple>
            </setHeader>

            <!--<to uri="direct:postValidateCSVFields"/>-->

            <log message="${id} CameraTrapIngest: Finished Researcher's data processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddVolunteerResource">
            <from uri="direct:addVolunteerResource"/>
            <log message="${id} CameraTrapIngest: Starting Volunteer's data processing ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- When there are Volunteer observations. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=Volunteer%20Observations"/>
            <log message="Volunteer Observation Resource PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:Input/xslt/volunteer.xsl"/>
            <transform>
                <xpath>
                    //researcher/text()
                </xpath>
            </transform>
            <recipientList>
                <simple>
                    fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=Volunteer%20Observations&amp;versionable=false"
                </simple>
            </recipientList>
            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl" />
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <setHeader headerName="ResourceCount">
                <simple>${header.ResourceCount}++</simple>
            </setHeader>

            <!--<to uri="direct:postValidateCSVFields"/>-->

            <log message="${id} CameraTrapIngest: Finished Volunteer's data processing."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddFITSDataStream">
            <from uri="direct:addFITSDataStream"/>
            <log message="${id} CameraTrapIngest: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileAbsolutePath}
                </simple>
            </recipientList>
            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id} CameraTrapIngest: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="edu.si.ctingest"/>
                    </setHeader>
                    <log message="${id} CameraTrapIngest: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id} CameraTrapIngest: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapAddMODSDataStream">
            <from uri="direct:addMODSDataStream"/>
            <log message="${id} CameraTrapIngest: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>
            -->

            <!-- Get the FITS XML and use XPATH to get the created date from it. -->
            <setHeader headerName="FITSCreatedDate">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //fits:fileinfo/fits:created[@toolname="Exiftool"]
                </xpath>
            </setHeader>
            <!--
            <log message="MODS FITS Created Date - ${header.FITSCreatedDate}"/>
            -->

            <!-- TODO - The Image ID has .JPG appended and we may want to make this consistent. -->
            <to uri="velocity:file:Input/templates/CTImageResourceMODSTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>

            <!-- We only want to validate one ImageSequenceId so Filter out the postValidateMODSField route based on
            the CamelSplitIndex from the split in the processResources route-->
            <!--<filter>
                <simple>
                    ${property.CamelSplitIndex} &lt;= 0
                </simple>
                <to uri="direct:postValidateMODSFields"/>
            </filter>-->

            <log message="${id} CameraTrapIngest: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapCreateThumbnailImage">
            <from uri="direct:createThumbnail"/>
            <log message="${id} CameraTrapIngest: Started creating thumbnail ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <onException>
                <exception>javax.imageio.IIOException</exception>
                <redeliveryPolicy maximumRedeliveries="0"/>
                <continued>
                    <constant>
                        true
                    </constant>
                </continued>
                <stop/>
            </onException>

            -->

            <doTry>
                <to uri="thumbnailator:image?keepRatio=true&amp;size=(200,150)"/>
                <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>
                <doCatch>
                    <exception>javax.imageio.IIOException</exception>
                    <log message="${id} CameraTrapIngest: Cannot create thumbnail image corrupted."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                </doCatch>
            </doTry>

            <log message="${id} CameraTrapIngest: Finished creating thumbnail."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapCreateArchivalImage">
            <from uri="direct:createArchivalImage"/>
            <log message="${id} CameraTrapIngest: Started creating archival image ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
                NOTE: This is planned to be a JPEG 2000 but we are not doing it yet.
            <to uri="thumbnailator:image?quality=80%&amp;size=(2048,1536)"/>
            <to uri="file://CameraTrapOutput/resample"/>
            -->

            <log message="${id} CameraTrapIngest: Finished creating archival image."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessParents">
            <from uri="direct:processParents"/>
            <log message="${id} CameraTrapIngest: Started processing parents ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <setBody>
                <simple>
                    {{si.ct.root}}
                </simple>
            </setBody>
            <!-- Check if the root exists, else quit. -->
            <to uri="direct:findObjectByPIDPredicate"/>
            <choice>
                <when>
                    <simple>
                        ${body} == 'true'
                    </simple>
                    <log message="${id} CameraTrapIngest: Root object exists."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            {{si.ct.root}}
                        </simple>
                    </setHeader>
                    <!-- Add the parents if needed. -->
                    <to uri="direct:processProject"/>
                    <to uri="direct:processSubproject"/>
                    <!-- Plot is optional. -->
                    <filter>
                        <xpath resultType="java.lang.String" headerName="ManifestXML">
                            boolean(//PlotName/text()[1])
                        </xpath>
                        <to uri="direct:processPlot"/>
                    </filter>
                </when>
                <otherwise>
                    <!-- Stop processing this deployment. -->
                    <log message="${id} CameraTrapIngest: Root object does not exist."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                    <throwException ref="noRootObject"/>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing parents."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapFindObject">
            <from uri="direct:findObject"/>
            <log message="${id} CameraTrapIngest: Started find object ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
            <log message="${id} CameraTrapIngest: Find: Label - ${body}  Parent - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <transform>
                <simple>
                    ${body.replaceAll("'", "\'")}
                </simple>
            </transform>
            -->
            <!-- There is a bug in Camel that causes replaceAll to fail so I am using Groovy for now.  We
                 will want to remove this so we don't have to include the Groovy feature just for this.
                 The bug is fixed in newer versions of Camel.
            -->
            <transform>
                <groovy>
                    request.body.replace("'", "\\'")
                </groovy>
            </transform>

            <log message="Replace body - ${body}" loggingLevel="WARN"/>

            <setBody>
                <!-- The query needs to also check directly along the parent axis since names are not unique. -->
                <simple>
                    SELECT ?o FROM &lt;#ri&gt;
                    WHERE
                    {
                        ?o &lt;fedora-model:label&gt; '${body}' .
                        &lt;info:fedora/${header.CamelFedoraPid}&gt; &lt;info:fedora/fedora-system:def/relations-external#hasConcept&gt; ?o .
                    }
                </simple>
            </setBody>
            <log message="${id} CameraTrapIngest: Project Parent - ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            <log message="${id} CameraTrapIngest: Query Result - ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <!-- Count the results. If greater than one warn about duplicate parents. -->
            <choice>
                <when>
                    <xpath>
                        count(/ri:sparql/ri:results/ri:result) > 1
                    </xpath>
                    <log message="${id} CameraTrapIngest: Warning - Duplicate parents."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                </when>
            </choice>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:o/@uri,'/')
                </xpath>
            </setBody>

            <log message="${id} CameraTrapIngest: Finished find object."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapFindObjectByPIDPredicate">
            <from uri="direct:findObjectByPIDPredicate"/>
            <log message="${id} CameraTrapIngest: Started find object by PID ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Return true in the body if the object exists for the PID, false if not. -->
            <setBody>
                <!-- ASK FROM &lt;#ri&gt; -->
                <simple>
                    ASK FROM &lt;#ri&gt;
                    {
                        &lt;info:fedora/${body}&gt; ?p ?o .
                    }
                </simple>
            </setBody>
            <log message="${id} CameraTrapIngest: Find Query - ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            <log message="${id} CameraTrapIngest: Find Query Result - ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    /ri:sparql/ri:results/ri:result[1]/ri:k0/text()
                </xpath>
            </setBody>
            <log message="Find Object By PID - ${body}."
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>

            <log message="${id} CameraTrapIngest: Finished find object by PID."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessPlot">
            <from uri="direct:processPlot"/>
            <log message="${id} CameraTrapIngest: Started processing plot ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>
            -->

            <!-- Look for the plot (its optional). -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    concat(//SubProjectName/text(), ':', //PlotName/text())
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <log message="${id} CameraTrapIngest: Plot: Label - ${body}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject" />
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Plot does not exist"
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <!-- Stash the sub-project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create CT plot and add it as a sub-concept of the sub-project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT sub-project to the child CT plot -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=FGDC-CTPlot&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-CTPlot%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing plot as the current object. -->
                    <log message="${id} CameraTrapIngest: Plot already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing plot."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessSubproject">
            <from uri="direct:processSubproject"/>
            <log message="${id} CameraTrapIngest: Started processing subproject ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>
            -->

            <!-- Look for the sub-project. -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //SubProjectName
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <log message="${id} CameraTrapIngest: Sub-project: Label - ${body}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject" />
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Sub-project does not exist"
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <!-- Stash the Project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create CT sub-project and add it as a sub-concept of the project. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the sub-project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT project to the child CT sub-project -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-ResearchTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=FGDC-Research&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-Research%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing sub-project as the current object. -->
                    <log message="${id} CameraTrapIngest: Sub-project already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing subproject."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="CameraTrapProcessProject">
            <from uri="direct:processProject"/>
            <log message="${id} CameraTrapIngest: Started processing project ..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!--
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>
            -->

            <!-- Look for the project. -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //ProjectName
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <log message="${id} CameraTrapIngest: Label - ${body}  Parent PID - ${header.CamelFedoraPid}."
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>
            <to uri="direct:findObject"/>
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id} CameraTrapIngest: Project does not exist."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <!-- Create CT project and add it as a sub-concept of the Camera Trap root object. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project. -->
                    <to uri="velocity:file:Input/templates/CTProjectTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent CT root object to the child CT project. -->
                    <to uri="fedora:hasConcept?parentPid={{si.ct.root}}&amp;childPid=${header.CamelFedoraPid}"/>
                    <to uri="velocity:file:Input/templates/CTProjectEAC-CPFTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=EAC-CPF&amp;type=text/xml&amp;group=X&amp;dsLabel=EAC-CPF&amp;versionable=true"/>

                    <!-- Post Validate the EAC-CPF datastream fields exist and match the manifest -->
                    <!--<to uri="direct:postValidate_EAC-CPF_fields"/>-->
                </when>
                <otherwise>
                    <!-- Return the existing project as the current object. -->
                    <log message="${id} CameraTrapIngest: Project already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="edu.si.ctingest"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <log message="${id} CameraTrapIngest: Finished processing project."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <!-- =================================================================================================================== -->


        <!-- Validate Post Ingest Datastream Metadata Fields -->
        <route id="CameraTrapPostValidateIngest">
            <from uri="direct:postValidateIngest"/>
            <log message="${header.jasonLog} (0) CameraTrapPostValidateIngest: Starting post ingest validation ..."
                 loggingLevel="WARN"
                 logName="edu.si.ctingest"/>

            <!--<log message="${header.jasonLog} (0) \n$Body:\n${body}"
                 loggingLevel="WARN"
                 logName="edu.si.ctingest"/>-->

            <to uri="direct:postValidate_EAC-CPF_fields"/>
            <to uri="direct:postValidate_FGDC_Fields"/>
            <to uri="direct:postValidateMODSFields"/>

            <!--<log message="${header.jasonLog} (END) CameraTrapPostValidateIngest:\nBody:\n${body}\nHeaders:\n${headers}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>-->

        </route>

        <!-- Helper Route to get the Parent Project PID -->
        <route id="CameraTrapPostValidate_GetParentProjectHelperRoute">
            <from uri="direct:postValidate_GetParentProjectHelperRoute"/>

            <log message="${header.jasonLog} (0) CameraTrapPostValidate_GetParentProjectHelperRoute: Getting Project Parent..."
                 loggingLevel="WARN"
                 logName="edu.si.ctingest"/>

            <setBody>
                <simple>
                    ${header.CamelFedoraLabel}
                </simple>
            </setBody>

            <log message="${header.jasonLog} (1) CameraTrapPostValidate_GetParentProjectHelperRoute: CamelFedoraLabel - ${header.CamelFedoraLabel}"
                 loggingLevel="WARN"
                 logName="edu.si.ctingest"/>

            <to uri="direct:findObject"/>

            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${header.jasonLog} (2 DNE) CameraTrapPostValidate_GetParentProjectHelperRoute: ${header.CamelFedoraLabel} Project does not exist."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>

                </when>
                <otherwise>
                    <!-- Return the existing project as the current object. -->
                    <log message="${header.jasonLog} (2) CameraTrapPostValidate_GetParentProjectHelperRoute: ${header.CamelFedoraLabel} Project exists - ${body}."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>

                    <!-- Store Parent Project PID -->
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>

                    <log message="${header.jasonLog} (3) CameraTrapPostValidate_GetParentProjectHelperRoute: Getting Project Parent..."
                         loggingLevel="WARN"
                         logName="edu.si.ctingest"/>
                </otherwise>
            </choice>
        </route>

        <!-- Post Validate EAC-CPF fields -->
        <route id="CameraTrapPostValidate_EAC-CPF_Fields">
            <from uri="direct:postValidate_EAC-CPF_fields"/>

            <log message="${id} CameraTrapValidate_EAC-CPF_Fields: Starting Post Ingest Validation of EAC-CPF Metadata Fields..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Set up to get the EAC-CPF datastream from the parent project -->
            <!-- Look for the project. -->
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //ProjectName
                </xpath>
            </setHeader>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    {{si.ct.root}}
                </simple>
            </setHeader>

            <!-- Use the Helper Route to  get the Parent Project PID -->
            <to uri="direct:postValidate_GetParentProjectHelperRoute"/>

            <!-- Get the EAC-CPF datastream from the project parent -->
            <to uri="fedora://getDatastreamDissemination?dsId=EAC-CPF&amp;exchangePattern=InOut"/>

            <convertBodyTo type="java.lang.String"/>

            <setHeader headerName="datastreamValidationXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <!-- Now check the EAC-CPF Latitude Field -->
            <setHeader headerName="FieldName">
                <simple>
                    EAC-CPF Latitude
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //eac:eac-cpf/eac:cpfDescription/eac:description/eac:place/eac:placeEntry/@latitude, //CameraTrapDeployment/ActualLatitude/text()
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!-- Now check the EAC-CPF Longitude Field -->
            <setHeader headerName="FieldName">
                <simple>
                    EAC-CPF Longitude
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //eac:eac-cpf/eac:cpfDescription/eac:description/eac:place/eac:placeEntry/@longitude, //CameraTrapDeployment/ActualLongitude/text()
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!-- Now check the EAC-CPF PublishDate Field -->
            <setHeader headerName="FieldName">
                <simple>
                    EAC-CPF PublishDate
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //eac:eac-cpf/eac:control/eac:localControl/eac:date, //*[@PublishDate]
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!-- Now check the EAC-CPF ProjectDataAccessandUseConstraints Field -->
            <setHeader headerName="FieldName">
                <simple>
                    EAC-CPF ProjectDataAccessandUseConstraints
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //eac:eac-cpf/eac:cpfDescription/eac:description/eac:functions/eac:function/eac:descriptiveNote/eac:p, //*[@ProjectDataAccessandUseConstraints]
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>
            <to uri="direct:postValidationAggregationStrategy"/>

            <setBody>
                <simple>
                    post ingest validation complete
                </simple>
            </setBody>

            <to uri="direct:postValidationAggregationStrategy"/>

            <log message="${id} CameraTrapValidate_EAC-CPF_Fields: Finished EAC-CPF Post validation..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <route id="PostValidationAggregationStrategy">
            <from uri="direct:postValidationAggregationStrategy"/>
            <aggregate strategyRef="postValidationAggregatorStrategy">
                <correlationExpression>
                    <simple>header.validationStatusMessage</simple>
                </correlationExpression>
                <completionPredicate>
                    <simple>${body} contains 'post ingest validation complete'</simple>
                </completionPredicate>

                <log message="PostValidationAggregationMessage:\n ${body}"
                     loggingLevel="INFO"
                     logName="edu.si.ctingest"/>
                <to uri="activemq:queue:ct.post.validation.error"/>
            </aggregate>
        </route>

        <!--Post Validate FGDC Fields-->
        <route id="CameraTrapPostValidateFGDCFields">
            <from uri="direct:postValidate_FGDC_Fields"/>

            <log message="${id} ValidateFGDCFields: Starting Post Ingest Validation of FGDC Metadata Fields..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>

            <!-- Set up to get the FGDC datastream -->
            <!-- Look for the project Site. -->
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //CameraSiteName
                </xpath>
            </setHeader>

            <log message="${id} ValidateFGDCFields: CamelFedoraPid:\n${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.SitePID}
                </simple>
            </setHeader>

            <!-- Use the Helper Route to  get the Parent Project PID -->
            <to uri="direct:postValidate_GetParentProjectHelperRoute"/>

            <!-- Get the FGDC datastream from the project parent -->
            <to uri="fedora://getDatastreamDissemination?dsId=FGDC&amp;exchangePattern=InOut"/>

            <convertBodyTo type="java.lang.String"/>

            <setHeader headerName="datastreamValidationXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <log message="${id} ValidateFGDCFields: Body:\n${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>

            <!-- Now check the FGDC CameraDeploymentID Field -->
            <setHeader headerName="FieldName">
                <simple>
                    FGDC CameraDeploymentID
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //metadata/idinfo/citation/citeinfo/othercit/text(), //CameraTrapDeployment/CameraDeploymentID/text()
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!-- Now check the FGDC Bait Field -->
            <setHeader headerName="FieldName">
                <simple>
                    FGDC Bait
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //metadata/dataqual/lineage/method[1]/methodid/methkey/text(), //CameraTrapDeployment/Bait/text()
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!-- Now check the FGDC Feature Field -->
            <setHeader headerName="FieldName">
                <simple>
                    FGDC Feature
                </simple>
            </setHeader>

            <setHeader headerName="validationXpaths">
                <simple>
                    //metadata/dataqual/lineage/method[2]/methodid/methkey/text(), //CameraTrapDeployment/Feature/text()
                </simple>
            </setHeader>

            <to uri="bean:postValidationBean?method=validateField"/>

            <setBody>
                <simple>
                    post ingest validation complete
                </simple>
            </setBody>

            <to uri="direct:postValidationAggregationStrategy"/>

            <!--<split streaming="true">
                <xtokenize>//metadata</xtokenize>

                &lt;!&ndash; Validate FGDC CameraDeploymentId&ndash;&gt;
                <choice>
                    <when>
                        &lt;!&ndash; Validate that the FGDC CameraDeploymentID exists &ndash;&gt;
                        <xpath resultType="java.lang.String">
                            exists(//metadata/idinfo/citation/citeinfo/othercit/text())
                        </xpath>

                        <setHeader headerName="CameraDeploymentId">
                            <xpath resultType="java.lang.String">
                                //metadata/idinfo/citation/citeinfo/othercit/text()
                            </xpath>
                        </setHeader>

                        <setHeader headerName="ManifestCameraDeploymentId">
                            <xpath resultType="java.lang.String" headerName="ManifestXML">
                                //CameraTrapDeployment/CameraDeploymentID/text()
                            </xpath>
                        </setHeader>

                        <log message="${id} ValidateFGDCFields: FGDC CameraDeploymentId exists validation passed..."
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>

                        <choice>
                            <when>
                                &lt;!&ndash; Now Validate that the FGDC CameraDeploymentID matches the Manifest &ndash;&gt;
                                <simple>
                                    ${header.CameraDeploymentId} == ${header.ManifestCameraDeploymentId}
                                </simple>

                                <log message="${id} ValidateFGDCFields: FGDC CameraDeploymentId matches the manifest validation passed..."
                                     loggingLevel="INFO"
                                     logName="edu.si.ctingest"/>
                            </when>
                            <otherwise>
                                &lt;!&ndash; The FGDC CameraDeploymentID does not match the manifest &ndash;&gt;
                                <log message="${id} ValidateFGDCFields: FGDC CameraDeploymentId equals Manifest validation failed - sending msg to queue"
                                     loggingLevel="WARN"
                                     logName="edu.si.ctingest"/>
                                <setBody>
                                    <simple>
                                        Deployment Package ID - ${header.CamelFileParent}, Message - FGDC CameraDeploymentId equals validation failed.
                                        Expected ${header.ManifestCameraDeploymentId} but found ${header.CameraDeploymentId}.
                                    </simple>
                                </setBody>
                                <to uri="activemq:queue:ct.post.validation.error"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        &lt;!&ndash; The FGDC CameraDeploymentID does not exist &ndash;&gt;
                        <log message="${id} ValidateFGDCFields: FGDC CameraDeploymentId exists validation failed - sending msg to queue"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                        <setBody>
                            <simple>
                                Deployment Package ID - ${header.CamelFileParent}, Message - FGDC CameraDeploymentId exists validation failed. Expected ${header.ManifestCameraDeploymentId} but found FGDC CameraDeploymentId does not exist.
                            </simple>
                        </setBody>
                        <to uri="activemq:queue:ct.post.validation.error"/>
                    </otherwise>
                </choice>

                &lt;!&ndash; Validate FGDC Bait Field &ndash;&gt;
                <choice>
                    <when>
                        &lt;!&ndash; Validate that FGDC Bait exists &ndash;&gt;
                        &lt;!&ndash;<simple>
                            ${header.BaitExist} == 'true'
                        </simple>&ndash;&gt;
                        <xpath resultType="java.lang.String">
                            exists(//metadata/dataqual/lineage/method[1]/methodid/methkey/text())
                        </xpath>

                        <setHeader headerName="Bait">
                            <xpath resultType="java.lang.String">
                                //metadata/dataqual/lineage/method[1]/methodid/methkey/text()
                            </xpath>
                        </setHeader>

                        <setHeader headerName="ManifestBait">
                            <xpath resultType="java.lang.String" headerName="ManifestXML">
                                //CameraTrapDeployment/Bait/text()
                            </xpath>
                        </setHeader>

                        <log message="${id} ValidateFGDCFields: FGDC Bait exists validation passed..."
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>

                        <choice>
                            <when>
                                &lt;!&ndash; Now Validate that the FGDC Bait matches the Manifest &ndash;&gt;
                                <simple>
                                    ${header.Bait} == ${header.ManifestBait}
                                </simple>

                                <log message="${id} ValidateFGDCFields: FGDC Bait matches the manifest validation passed..."
                                     loggingLevel="INFO"
                                     logName="edu.si.ctingest"/>
                            </when>
                            <otherwise>
                                &lt;!&ndash; FGDC Bait does not match the Manifest &ndash;&gt;
                                <log message="${id} ValidateFGDCFields: FGDC Bait equals Manifest validation failed - sending msg to queue"
                                     loggingLevel="WARN"
                                     logName="edu.si.ctingest"/>
                                <setBody>
                                    <simple>
                                        Deployment Package ID - ${header.CamelFileParent}, Message - FGDC Bait equals validation failed.
                                        Expected ${header.ManifestBait} but found ${header.Bait}.
                                    </simple>
                                </setBody>
                                <to uri="activemq:queue:ct.post.validation.error"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        &lt;!&ndash; The FGDC Bait does not exist &ndash;&gt;
                        <log message="${id} ValidateFGDCFields: FGDC Bait exists validation failed - sending msg to queue"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                        <setBody>
                            <simple>
                                Deployment Package ID - ${header.CamelFileParent}, Message - FGDC Bait exists validation failed.
                                Expected ${header.ManifestBait} but found FGDC Bait does not exist.
                            </simple>
                        </setBody>
                        <to uri="activemq:queue:ct.post.validation.error"/>
                    </otherwise>
                </choice>

                &lt;!&ndash; Validate FGDC Feature Field &ndash;&gt;
                <choice>
                    <when>
                        &lt;!&ndash; Validate that the FGDC Feature Exists &ndash;&gt;
                        &lt;!&ndash;<simple>
                            ${header.FeatureExist} == 'true'
                        </simple>&ndash;&gt;
                        <xpath resultType="java.lang.String">
                            exists(//metadata/dataqual/lineage/method[2]/methodid/methkey/text())
                        </xpath>

                        <setHeader headerName="Feature">
                            <xpath resultType="java.lang.String">
                                //metadata/dataqual/lineage/method[2]/methodid/methkey/text()
                            </xpath>
                        </setHeader>

                        <setHeader headerName="ManifestFeature">
                            <xpath resultType="java.lang.String" headerName="ManifestXML">
                                //CameraTrapDeployment/Feature/text()
                            </xpath>
                        </setHeader>

                        <log message="${id} ValidateFGDCFields: FGDC Feature exists validation passed..."
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>

                        <choice>
                            <when>
                                &lt;!&ndash; Now Validate the FGDC Feature matches the Manifest &ndash;&gt;
                                <simple>
                                    ${header.Feature} == ${header.ManifestFeature}
                                </simple>

                                <log message="${id} ValidateFGDCFields: FGDC Feature matches the manifest validation passed..."
                                     loggingLevel="INFO"
                                     logName="edu.si.ctingest"/>
                            </when>
                            <otherwise>
                                &lt;!&ndash; The FGDC Feature does not match the Manifest &ndash;&gt;
                                <log message="${id} ValidateFGDCFields: FGDC Feature equals Manifest validation failed - sending msg to queue"
                                     loggingLevel="WARN"
                                     logName="edu.si.ctingest"/>
                                <setBody>
                                    <simple>
                                        Deployment Package ID - ${header.CamelFileParent}, Message - FGDC Feature equals validation failed.
                                        Expected ${header.ManifestFeature} but found ${header.Feature}.
                                    </simple>
                                </setBody>
                                <to uri="activemq:queue:ct.post.validation.error"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        &lt;!&ndash; The FGDC Feature does not exist &ndash;&gt;
                        <log message="${id} ValidateFGDCFields: FGDC Feature exists validation failed - sending msg to queue"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                        <setBody>
                            <simple>
                                Deployment Package ID - ${header.CamelFileParent}, Message - FGDC Feature exists validation failed.
                                Expected ${header.ManifestFeature} but found FGDC Feature does not exist.
                            </simple>
                        </setBody>
                        <to uri="activemq:queue:ct.post.validation.error"/>
                    </otherwise>
                </choice>
            </split>-->

            <log message="${id} ValidateFGDCFields: Finished FGDC Post validation"
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

        <!-- Post Validate MODS Fields -->
        <route id="CameraTrapPostValidateMODS_Fields">
            <from uri="direct:postValidateMODSFields"/>

            <log message="${id} CameraTrapPostValidateMODS_Fields: Starting Post Ingest Validation of MODS Metadata Fields..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>


            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.SitePID}
                </simple>
            </setHeader>

            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //CameraTrapDeployment/ImageSequence[1]/Image[1]/ImageId[1]/text()
                </xpath>
            </setHeader>

            <!-- Get the RELS-EXT datastream -->
            <to uri="fedora://getDatastreamDissemination?dsId=RELS-EXT&amp;exchangePattern=InOut"/>

            <!--<log message="${id} CameraTrapPostValidateMODS_Fields: \nBody:\n${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.ctingest"/>-->



            <split streaming="true">
                <xtokenize>//fedora:hasResource</xtokenize>
                <!-- Stashing the PID in the header in case of RI search redelivery attempts for later use-->
                <setHeader headerName="ValidationPID">
                    <xpath resultType="java.lang.String">
                        //fedora:hasResource/@rdf:resource/substring-after(., 'info:fedora/')
                    </xpath>
                </setHeader>

                <setHeader headerName="CamelFedoraLabel">
                    <xpath resultType="java.lang.String" headerName="ManifestXML">
                        //CameraTrapDeployment/ImageSequence[1]/Image[1]/ImageId[1]/text()
                    </xpath>
                </setHeader>

                <setHeader headerName="CamelFedoraPid">
                    <xpath resultType="java.lang.String">
                        //fedora:hasResource/@rdf:resource/substring-after(., 'info:fedora/')
                    </xpath>
                </setHeader>

                <!-- Get the DC datastream -->
                <to uri="fedora://getDatastreamDissemination?dsId=DC&amp;exchangePattern=InOut"/>

                <convertBodyTo type="java.lang.String"/>

                <log message="${id} CameraTrapPostValidateMODS_Fields: \n CamelFedoraLabel = ${header.CamelFedoraLabel}"
                     loggingLevel="DEBUG"
                     logName="edu.si.ctingest"/>

                <choice>
                    <when>
                        <xpath>
                            'in:CamelFedoraLabel' = /oai_dc:dc/dc:title/text()
                        </xpath>

                        <setBody>
                            <xpath resultType="java.lang.String">
                                /oai_dc:dc/dc:identifier/text()
                            </xpath>
                        </setBody>
                        <log message="${id} CameraTrapPostValidateMODS_Fields: \nBody:::::::::::\n${body}"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                        <to uri="log:edu.si.ctingest?level=WARN&amp;showBody=true"/>
                    </when>
                    <otherwise>
                        <log message="${id} CameraTrapPostValidateMODS_Fields: NOT WORKING!!"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                    </otherwise>
                </choice>




            </split>


            <!--<setHeader headerName="CamelFedoraPid">
                <xpath>

                </xpath>
            </setHeader>-->





            <!--<split streaming="true">
                <xtokenize>//mods:mods</xtokenize>
                <choice>
                    <when>
                        <xpath resultType="java.lang.String">
                            exists(//mods:mods/mods:relatedItem[1]/mods:identifier[1]/text())
                        </xpath>

                        &lt;!&ndash; Get the first ImageSeqID from the Manifest so we can locate the correct MODS record &ndash;&gt;
                        <setHeader headerName="ManifestImageSequenceId">
                            <xpath resultType="java.lang.String" headerName="ManifestXML">
                                //CameraTrapDeployment/ImageSequence[1]/ImageSequenceId[1]
                            </xpath>
                        </setHeader>

                        <setHeader headerName="MODSImageSequenceId">
                            <xpath resultType="java.lang.String">
                                //mods:mods/mods:relatedItem[1]/mods:identifier[1]
                            </xpath>
                        </setHeader>

                        <log message="${id} CameraTrapPostValidateMODS_Fields: MODS ImageSequenceId exists validation passed..."
                             loggingLevel="INFO"
                             logName="edu.si.ctingest"/>

                        <choice>
                            &lt;!&ndash; Validate that the MODS ImageSequenceId matches the Manifest &ndash;&gt;
                            <when>
                                <simple>
                                    ${header.MODSImageSequenceId} == ${header.ManifestImageSequenceId}
                                </simple>

                                <log message="${id} CameraTrapPostValidateMODS_Fields: MODS ImageSequenceId matches the manifest validation passed..."
                                     loggingLevel="INFO"
                                     logName="edu.si.ctingest"/>
                            </when>
                            <otherwise>
                                &lt;!&ndash; The MODS ImageSequenceId does not match the manifest &ndash;&gt;
                                <log message="${id} CameraTrapPostValidateMODS_Fields: MODS ImageSequenceId equals Manifest validation failed - sending msg to queue
                                        Expected ${header.ManifestImageSequenceId} but found ${header.MODSImageSequenceId}."
                                     loggingLevel="WARN"
                                     logName="edu.si.ctingest"/>
                                <setBody>
                                    <simple>
                                        Deployment Package ID - ${header.CamelFileParent}, Message - MODS
                                        ImageSequenceId equals validation failed.
                                        Expected ${header.ManifestImageSequenceId} but found
                                        ${header.MODSImageSequenceId}.
                                    </simple>
                                </setBody>
                                <to uri="activemq:queue:ct.post.validation.error"/>
                            </otherwise>

                        </choice>
                    </when>
                    <otherwise>
                        &lt;!&ndash; The MODS ImageSequenceId does not exist &ndash;&gt;
                        <log message="${id} CameraTrapPostValidateMODS_Fields: MODS ImageSequenceId exists validation failed - sending msg to queue"
                             loggingLevel="WARN"
                             logName="edu.si.ctingest"/>
                        <setBody>
                            <simple>
                                Deployment Package ID - ${header.CamelFileParent}, Message - MODS ImageSequenceId exists
                                validation failed. Expected ${header.ManifestImageSequenceId} but found MODS
                                ImageSequenceId does not exist.
                            </simple>
                        </setBody>
                        <to uri="activemq:queue:ct.post.validation.error"/>
                    </otherwise>
                </choice>
            </split>-->

            <log message="${id} CameraTrapPostValidateMODS_Fields: Finished MODS Post validation..."
                 loggingLevel="INFO"
                 logName="edu.si.ctingest"/>
        </route>

    </camelContext>
</blueprint>