<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xsi:schemaLocation="
http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <cm:property-placeholder id="system.placeholder" persistent-id="camel.blueprint" />

    <bean id="pidAggregator" class="edu.smithsonian.services.fedorarepo.aggregators.PidAggregationStrategy" />
    
    <!--
        TODO: Add Deployment Metadata backport
    -->
    <camelContext xmlns="http://camel.apache.org/schema/blueprint" xmlns:ri="http://www.w3.org/2001/sw/DataAccess/rf1/result" >

        <!-- using Camel properties component and refer to the blueprint property placeholder by its id -->
        <propertyPlaceholder id="properties" 
                             location="blueprint:system.placeholder,file:${karaf.home}/etc/system.properties"/>
        
        <route id="CameraTrapStartProcessing">
            <from uri="file:Process?moveFailed=Error_CamelTrap&amp;delete=true"/>
            <log message="Starting Camera Trap processing ..." />
            <!--If issue with large archives can 'slow' down the route with delay below-->
            <delay>
                <constant>3000</constant>
            </delay>
            <log message="Starting Extraction" />
            <to uri="extractor:extract?location=CameraTrapData" />
            <log message="Finished Extraction" />
            <transform>
                <simple>deployment_manifest.xml</simple>
            </transform>
            <to uri="reader:file?type=text" />
            <to uri="validator:file:Input/schemas/DeploymentManifest.xsd" />
            <to uri="direct:process" />
            <log message="Finished Data processing!" />
        </route>
        
        <route id="CameraTrapProcessPackage">
            <from uri="direct:processPackage" />
            <log message="Starting package processing..."/>
            <setHeader headerName="ManifestXML"><simple>${body}</simple></setHeader>
            <setHeader headerName="CamelFedoraPid"><simple>{{si.ct.root}}</simple></setHeader>
            <to uri="direct:processParents"/>
            <!--
                Temporary while working on hierarchy creation. The CamelFedoraPid is coming out correctly but the
                manifest is honked.
             -->
            <setBody><simple>${headers.ManifestXML}</simple></setBody>
            <to uri="direct:processSite"/>
            <log message="Finished package processing."/>
        </route>
        
        <route id="CameraTrapProcessSite">
            <from uri="direct:processSite"/>
            <log message="Starting Site processing... " />
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String">//CameraSiteName</xpath>
            </setHeader>
            <!-- <log message="SiteLabel - ${header.CamelFedoraLabel}" /> -->
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}" />
            <multicast>
                <to uri="direct:manifest" />
                <to uri="direct:fgdc" />
                <to uri="direct:processImages" />
            </multicast>
            <log message="Finished Site processing." />
        </route>
        <route id="CameraTrapTransformManifest" >
            <from uri="direct:manifest" />
            <to uri="fedora:datastream?name=MANIFEST&amp;type=text/xml&amp;group=M" />
            <log message="Added Manifest DataStream" /> 
        </route>
        <route id="CameraTrapAddFGDCDatastream" >
            <from uri="direct:fgdc" />
            <!-- <log message="${in.body}" /> -->
            <to uri="xslt:file:Input/xslt/amazon_map1.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map2.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map3.xsl"/>
            <to uri="fedora:datastream?name=FGDC&amp;type=text/xml&amp;group=M" />
            <log message="Added FGDC DataStream" />
        </route>
        <route id="CameraTrapTransformResearcherData" >
            <from uri="direct:researcher" />
            <setHeader headerName="CamelFedoraLabel">
                <simple>researcher_observation.csv</simple>
            </setHeader>
            <setBody><simple>${header.ManifestXML}</simple></setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}" />
            <to uri="xslt:file:Input/xslt/researcher.xsl" />
            <transform>
                <xpath>//researcher/text()</xpath>
            </transform>
            <to uri="fedora:datastream?name=RESEARCHER&amp;type=text/csv&amp;group=M" />
            <log message="Researcher's Observation resource created" />
        </route>
        <route id="CameraTrapTransformVolunteerData" >
            <from uri="direct:volunteer" />
            <setHeader headerName="CamelFedoraLabel">
                <simple>volunteer_observation.csv</simple>
            </setHeader>
            <setBody><simple>${header.ManifestXML}</simple></setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}" />
            <to uri="xslt:file:Input/xslt/volunteer.xsl"/>
            <transform>
                <xpath>//researcher/text()</xpath>
            </transform>
            <to uri="fedora:datastream?name=VOLUNTEER&amp;type=text/csv&amp;group=M" />
            <log message="Volunteer's Observation resource created" />
        </route>
        <route id="CameraTrapProcessImages" >
            <from uri="direct:processImages" /> 
            <log message="Starting Image processing ..." />
            <log message="Resource1 - ${body}" />
            <setHeader headerName="ParentPID">
                <simple>${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Parent PID - ${header.CamelFedoraPid} and ${header.FedoraParentConcept}" />
            <!-- <setBody><simple>Default</simple></setBody> -->
            <!-- <log message="Resource2 - ${body}" /> -->
            <split strategyRef="pidAggregator" >
                <xpath>//ImageFileName/text()</xpath>
                <setHeader headerName="CamelFedoraLabel">
                    <simple>${body}</simple>
                </setHeader>
                <to uri="reader:file" />
                <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}" />
                <to uri="fedora:datastream?name=OBJ&amp;type=image/jpeg&amp;group=M" />
                <to uri="direct:transformImage" />
                <to uri="velocity:file:Input/templates/CameraTrapParentChildResourceTemplate.vsl" />
                <to uri="fedora:datastream?name=RELS-EXT" /> 
            </split>
            
            <to uri="direct:researcher" />
            <log message="${header.CamelFedoraPid}" />
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}" />

            <to uri="direct:volunteer" />
            <log message="${header.CamelFedoraPid}" />
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}" />

            <!--
                FIXME: We are stashing and unstashing 'FedoraParentConcept' to 'CamelParentConcept'
                       to add the datastream. Its not elegant to store and unstore the parent PID.
            -->
            <!-- <log message="Resource2 - ${body}" /> -->
            <setHeader headerName="CamelFedoraPid">
                <simple>${header.ParentPID}</simple>
            </setHeader>
            <to uri="velocity:file:Input/templates/CameraTrapResourceTemplate.vsl" />
            <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false" />
            <log message="Finished processing Images" />           
        </route>
        <route id="CameraTrapTransformImages">
            <from uri="direct:transformImage" />
            <!--<multicast>-->
                <to uri="direct:createThumbnail" />
                <!--<to uri="direct:createResampled" />-->
                <!--
                    TODO: Add FITS component to route
                -->
            <!--</multicast>-->
            <log message="Image processed" />
        </route>
        <route id="CameraTrapCreateThumbnailImage" >
            <from uri="direct:createThumbnail" />
            <to uri="thumbnailator:image?keepRatio=false&amp;size=(72,96)"/>
            <to uri="fedora:datastream?name=TN&amp;type=image/jpeg&amp;group=M" />
        </route>
        <route id="CameraTrapCreateResampledImage">
            <from uri="direct:createResampled" />
            <!--
                NOTE: This might not be needed

                FIXME: Figure out what the Drush scripts are doing to 'normalized'
                      the image. Based on conversation with Dan didn't sound like
                      it was changing the quality of the original
                FIXME: If 'normalized' image is needed and should be the same
                       size as the original, remove size requirement from route
            -->
            <to uri="thumbnailator:image?quality=80%&amp;size=(2048,1536)"/>
            <to uri="file://CameraTrapOutput/resample" />
        </route>
        
        <route id="CameraTrapProcessParents">
            <from uri="direct:processParents"/>
            <log message="Started processing parents ..."/>
            <to uri="direct:processProject"/>
            <to uri="direct:processSubproject"/>
            <to uri="direct:processPlot"/>
            <log message="Finished processing parents."/>
        </route>
        
        <route id="CameraTrapFindObject">
            <from uri="direct:findObject"/>
            <log message="Started find object ..."/>
            <log message="Root: Label - ${headers.CamelFedoraLabel}"/>
            <!--
                Set a header with the PID if found, empty string if not.
                We need to bring in two parameters for the call: The object label and the expected parent;
                <setBody><constant>SELECT ?a ?b ?c FROM &lt;#ri&gt; WHERE {?a ?b ?c}</constant></setBody>
            -->
            <setBody>
                <!--
                <simple>
                    select $o $title from &lt;#ri&gt; 
                    where  $title &lt;mulgara:is&gt; '${headers.CamelFedoraLabel}' and
                           $o &lt;fedora-model:label&gt; $title and
                           &lt;info:fedora/${headers.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; $o
                </simple>
                -->
                <!--
                <simple>
                    SELECT ?o ?title 
                    FROM &lt;#ri&gt;
                    WHERE
                    { 
                        ?o &lt;fedora-model:label&gt; '${headers.CamelFedoraLabel}' .
                        &lt;info:fedora/${headers.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; ?o .
                    }
                </simple>
                -->
                <simple>
                    SELECT ?o FROM &lt;#ri&gt;
                    WHERE
                    {
                        ?o &lt;fedora-model:label&gt; '${headers.CamelFedoraLabel}' .
                    }
                </simple>
            </setBody>
            <log message="Project Parent - ${body}"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            
            <!--
            <setBody>
                <simple>
                    &lt;sparql xmlns="http://www.w3.org/2001/sw/DataAccess/rf1/result"&gt;
                        &lt;head&gt;
                            &lt;variable name="o"/&gt;
                        &lt;/head&gt;
                        &lt;results&gt;
                            &lt;result&gt;
                                Junk
                                &lt;o uri="info:fedora/si:122557"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122564"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122571"/&gt;
                            &lt;/result&gt;
                        &lt;/results&gt;
                    &lt;/sparql&gt;
                </simple>
            </setBody>
            -->

            <log message="Query Result - ${body}" />
            <setHeader headerName="FoundObjectPID">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:o/@uri,'/')
                </xpath>
            </setHeader>
            <!-- <log message="Query Result XPath - ${headers.FoundObjectPID}"/> -->
            <setBody><simple>${headers.ManifestXML}</simple></setBody>
            <!-- <log message="Find Object - ${body}"/> -->
            <log message="Finished find object."/>
        </route>
        
        <route id="CameraTrapProcessPlot">
            <from uri="direct:processPlot"/>
            <log message="Started processing plot ..."/>
            <log message="Plot In: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <setHeader headerName="PlotLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//PlotName</xpath>
            </setHeader>
            <setHeader headerName="CamelFedoraLabel">
                <simple>${headers.CamelFedoraLabel}:${headers.PlotLabel}</simple>
            </setHeader>
            <log message="Plot: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <to uri="direct:findObject" />
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Plot does not exist"/>
                    <!-- Create CT plot and add it as a sub-concept of the sub-project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- Todo Add Relation from parent CT sub-project to the child CT plot -->
                </when>
                <otherwise>
                    <log message="Plot already exists"/>
                </otherwise>
            </choice>
            <log message="Plot End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Plot - ${body}"/> -->
            <log message="Finished processing plot."/>
        </route>
        
        <route id="CameraTrapProcessSubproject">
            <from uri="direct:processSubproject"/>
            <log message="Started processing subproject ..."/>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//SubProjectName</xpath>
            </setHeader>
            <log message="Sub-project: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <to uri="direct:findObject" />
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Sub-project does not exist"/>
                    <!-- Create CT sub-project and add it as a sub-concept of the project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- Todo Add Relation from parent CT project to the child CT sub-project -->
                </when>
                <otherwise>
                    <log message="Sub-project already exists"/>
                </otherwise>
            </choice>
            <log message="Sub-Project End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Project - ${body}"/> -->
            <log message="Finished processing subproject."/>
        </route>
        
        <route id="CameraTrapProcessProject">
            <from uri="direct:processProject"/>
            <log message="Started processing project ..."/>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//ProjectName</xpath>
            </setHeader>
            <log message="Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <to uri="direct:findObject"/>
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Project does not exist"/>
                    <!-- Create CT project and add it as a sub-concept of the specified root -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTProjectTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- TODO: Add Relation from parent static CT root to the child CT project -->
                </when>
                <otherwise>
                    <log message="Project already exists"/>
                </otherwise>
            </choice>
            <log message="Project End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Project - ${body}"/> -->
            <log message="Finished processing project."/>
        </route>

    </camelContext>
        
</blueprint>