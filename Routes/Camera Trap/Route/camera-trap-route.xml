<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xsi:schemaLocation="
http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <cm:property-placeholder id="system.placeholder" persistent-id="camel.blueprint" />

    <bean id="pidAggregator" class="edu.smithsonian.services.fedorarepo.aggregators.PidAggregationStrategy" />
    
    <!--
        TODO: Add Deployment Metadata backport
    -->
    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:ri="http://www.w3.org/2001/sw/DataAccess/rf1/result" 
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output">
        
        <!--
          The "unused" namespace definitions above are need to deal with the way Camel handles namespaces in XPath.
        -->

        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties" 
                             location="blueprint:system.placeholder,file:${karaf.home}/etc/system.properties"/>
        
        <route id="CameraTrapStartProcessing">
            <from uri="file:Process?moveFailed=Error_CamelTrap&amp;delete=true"/>
            <log message="Starting Camera Trap processing ..."/>
            <!--If there is an issue with staging large archives we can can 'slow' down the route with delay below. -->
            <delay>
                <constant>3000</constant>
            </delay>
            <log message="Starting Extraction"/>
            <to uri="extractor:extract?location=CameraTrapData"/>
            <log message="Finished Extraction"/>
            <transform>
                <simple>deployment_manifest.xml</simple>
            </transform>
            <to uri="reader:file?type=text"/>
            <to uri="validator:file:Input/schemas/DeploymentManifest.xsd"/>
            <to uri="direct:processPackage"/>
            <log message="Finished Camera Trap processing!"/>
        </route>
        
        <route id="CameraTrapProcessPackage">
            <from uri="direct:processPackage"/>
            <log message="Starting package processing..."/>
            <setHeader headerName="ManifestXML"><simple>${body}</simple></setHeader>
            <setHeader headerName="CamelFedoraPid"><simple>{{si.ct.root}}</simple></setHeader>
            <to uri="direct:processParents"/>
            <!--
                Temporary while working on hierarchy creation. The CamelFedoraPid is coming out correctly but the
                manifest is honked some routes. Since Camel support doing XPath directly from headers this is still
                convenient.
             -->
            <setBody><simple>${headers.ManifestXML}</simple></setBody>
            <to uri="direct:processSite"/>
            <log message="Finished package processing."/>
        </route>
        
        <route id="CameraTrapProcessSite">
            <from uri="direct:processSite"/>
            <log message="Starting Site processing... "/>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String">//CameraSiteName</xpath>
            </setHeader>
            <!-- <log message="SiteLabel - ${header.CamelFedoraLabel}" /> -->
            <setHeader headerName="ParentPID"><simple>${headers.CamelFedoraPid}</simple></setHeader>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
            <multicast>
                <to uri="direct:manifest"/>
                <to uri="direct:fgdc"/>
                <to uri="direct:processResources"/>
            </multicast>
            <log message="Finished Site processing."/>
        </route>
        
        <route id="CameraTrapTransformManifest">
            <from uri="direct:manifest"/>
            <to uri="fedora:datastream?name=MANIFEST&amp;type=text/xml&amp;group=M"/>
            <log message="Added Manifest DataStream"/> 
        </route>
        
        <route id="CameraTrapAddFGDCDatastream">
            <from uri="direct:fgdc"/>
            <!-- <log message="${in.body}" /> -->
            <to uri="xslt:file:Input/xslt/amazon_map1.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map2.xsl"/>
            <to uri="xslt:file:Input/xslt/amazon_map3.xsl"/>
            <to uri="fedora:datastream?name=FGDC&amp;type=text/xml&amp;group=M"/>
            <log message="Added FGDC DataStream"/>
        </route>
        
        <route id="CameraTrapTransformResearcherData">
            <from uri="direct:researcher"/>
            <setHeader headerName="CamelFedoraLabel"><simple>researcher_observation.csv</simple></setHeader>
            <setBody><simple>${header.ManifestXML}</simple></setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <to uri="xslt:file:Input/xslt/researcher.xsl"/>
            <transform><xpath>//researcher/text()</xpath></transform>
            <to uri="fedora:datastream?name=RESEARCHER&amp;type=text/csv&amp;group=M"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl" />
            <to uri="fedora:datastream?name=RELS-EXT"/>
            <log message="Researcher's Observation resource created"/>
        </route>
        
        <route id="CameraTrapTransformVolunteerData">
            <from uri="direct:volunteer"/>
            <setHeader headerName="CamelFedoraLabel"><simple>volunteer_observation.csv</simple></setHeader>
            <setBody><simple>${header.ManifestXML}</simple></setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <to uri="xslt:file:Input/xslt/volunteer.xsl"/>
            <transform><xpath>//researcher/text()</xpath></transform>
            <to uri="fedora:datastream?name=VOLUNTEER&amp;type=text/csv&amp;group=M"/>
            <to uri="velocity:file:Input/templates/CTDatasetResourceTemplate.vsl" />
            <to uri="fedora:datastream?name=RELS-EXT"/>
            <log message="Volunteer's Observation resource created"/>
        </route>
        
        <route id="CameraTrapProcessResources">
            <from uri="direct:processResources"/>
            <log message="Starting resource processing ..."/>
            <log message="Resource1 - ${body}"/>
            <setHeader headerName="ParentPID"><simple>${header.CamelFedoraPid}</simple></setHeader>
            <log message="Parent PID - ${header.ParentPID}"/>
            <!-- <log message="Resource - ${body}" /> -->
            
            <!-- This could be done as a Composed Message Processor -->
            <!-- There may be more than one sequence so we need to know the sequence ID for the image. -->
            <split strategyRef="pidAggregator">
                <xpath>//ImageFileName/text()</xpath>
                <log message="Split - ${body}"/>
                <setHeader headerName="CamelFedoraLabel"><simple resultType="java.lang.String">${body}</simple></setHeader>
                <setHeader headerName="CTImageSequenceID">
                    <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                        //ImageFileName[text()=$CamelFedoraLabel]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                    </xpath>
                </setHeader>
                <log message="CTImageSequenceID - ${headers.CTImageSequenceID}"/>
                <log message="CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"/>
                
                <!-- <setHeader headerName="testName"><xpath>substring-before(${body},",Image)</xpath></setHeader> -->
                <to uri="reader:file"/>
                <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                <to uri="fedora:datastream?name=OBJ&amp;type=image/jpeg&amp;group=M"/>
                <to uri="direct:transformImage"/>
                <to uri="velocity:file:Input/templates/CTImageResourceTemplate.vsl"/>
                <to uri="fedora:datastream?name=RELS-EXT"/>
                
                <!-- 
                    Creating FITS and MODS can be done as soon as the image is available since the image does not
                    need to be transformed in any way.
                -->
                <to uri="direct:processFITS"/>
                <to uri="direct:processMODS"/>
            </split>
            
            <to uri="direct:researcher"/>
            <log message="${header.CamelFedoraPid}"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}"/>

            <to uri="direct:volunteer"/>
            <log message="${header.CamelFedoraPid}"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="Aggregation: ${header.PIDAggregation}"/>

            <!--
                FIXME: We are stashing and unstashing 'FedoraParentConcept' to 'CamelParentConcept'
                       to add the datastream. Its not elegant to store and unstore the parent PID.
            -->
            <!-- <log message="Resource2 - ${body}" /> -->
            <setHeader headerName="CamelFedoraPid"><simple>${header.ParentPID}</simple></setHeader>
            <to uri="velocity:file:Input/templates/CTSiteTemplate.vsl"/>
            <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
            <log message="Finished resource processing."/>
        </route>
        
        <route id="CameraTrapTransformImages">
            <from uri="direct:transformImage"/>
            <!--<multicast>-->
                <to uri="direct:createThumbnail"/>
                <!-- <to uri="direct:createArchivalImage" /> -->
            <!--</multicast>-->
            <log message="Image processed"/>
        </route>
        
        <route id="CameraTrapProcessFITS">
            <from uri="direct:processFITS"/>
            <log message="Started processing FITS ..."/>
            <!-- TODO: Check if the call was successful and notify if not. -->
            <recipientList><simple>exec:fits?args=-i ${header.CamelFileAbsolutePath}</simple></recipientList>
            <log message="Exec FITS - ${body}"/>
            <to uri="fedora:datastream?name=FITS&amp;type=text/xml&amp;group=X"/>
            <log message="Finished processing FITS."/>
        </route>

        <route id="CameraTrapProcessMODS">
            <from uri="direct:processMODS"/>
            <log message="Started processing MODS ..."/>
            
            <!-- Get the FITS XML and use XPATH to get the created date from it. -->
            <setHeader headerName="FITSCreatedDate">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //fits:fileinfo/fits:created[@toolname="Exiftool"]
                </xpath>
            </setHeader>
            
            <!--
            <log message="MODS FITS Created Date - ${headers.FITSCreatedDate}"/>
            <log message="MODS CTImageSequenceID - ${headers.CTImageSequenceID}"/>
            <log message="CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"/>
            -->

            <!-- TODO - The Image ID has .JPG appended and this need to be made consistent. -->
            
            <to uri="velocity:file:Input/templates/CTImageResourceMODSTemplate.vsl"/>
            <to uri="fedora:datastream?name=MODS&amp;type=text/xml&amp;group=X"/>
            <log message="Finished processing MODS."/>
        </route>

        <route id="CameraTrapCreateThumbnailImage">
            <from uri="direct:createThumbnail"/>
            <log message="Started creating thumbnail ..."/>
            <to uri="thumbnailator:image?keepRatio=false&amp;size=(72,96)"/>
            <to uri="fedora:datastream?name=TN&amp;type=image/jpeg&amp;group=M"/>
            <log message="Finished creating thumbnail."/>
        </route>
        
        <route id="CameraTrapCreateArchivalImage">
            <from uri="direct:createArchivalImage"/>
            <log message="Started creating archival image ..."/>
            <!--
                NOTE: This is a JPEG 2000 and we are not doing it yet.
            
            <to uri="thumbnailator:image?quality=80%&amp;size=(2048,1536)"/>
            <to uri="file://CameraTrapOutput/resample"/>
            -->
            <log message="Finished creating archival image."/>
        </route>
        
        <route id="CameraTrapProcessParents">
            <from uri="direct:processParents"/>
            <log message="Started processing parents ..."/>
            <to uri="direct:processProject"/>
            <to uri="direct:processSubproject"/>
            <to uri="direct:processPlot"/>
            <log message="Finished processing parents."/>
        </route>
        
        <route id="CameraTrapFindObject">
            <from uri="direct:findObject"/>
            <log message="Started find object ..."/>
            <log message="Root: Label - ${headers.CamelFedoraLabel}"/>
            <!--
                Set a header with the PID if found, empty string if not.
                We need to bring in two parameters for the call: The object label and the expected parent;
                <setBody><constant>SELECT ?a ?b ?c FROM &lt;#ri&gt; WHERE {?a ?b ?c}</constant></setBody>
            -->
            <setBody>
                <!--
                <simple>
                    select $o $title from &lt;#ri&gt; 
                    where  $title &lt;mulgara:is&gt; '${headers.CamelFedoraLabel}' and
                           $o &lt;fedora-model:label&gt; $title and
                           &lt;info:fedora/${headers.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; $o
                </simple>
                -->
                <!--
                <simple>
                    SELECT ?o ?title 
                    FROM &lt;#ri&gt;
                    WHERE
                    { 
                        ?o &lt;fedora-model:label&gt; '${headers.CamelFedoraLabel}' .
                        &lt;info:fedora/${headers.CamelFedoraObject}&gt; &lt;fedora-rels-ext:hasConcept&gt; ?o .
                    }
                </simple>
                -->
                <!-- TODO - The query needs to also check directly along the parent axis since names are not unique. -->
                <simple>
                    SELECT ?o FROM &lt;#ri&gt;
                    WHERE
                    {
                        ?o &lt;fedora-model:label&gt; '${headers.CamelFedoraLabel}' .
                    }
                </simple>
            </setBody>
            <log message="Project Parent - ${body}"/>
            <to uri="fedora:search?lang=sparql&amp;type=tuples&amp;format=sparql"/>
            
            <!--
            <setBody>
                <simple>
                    &lt;sparql xmlns="http://www.w3.org/2001/sw/DataAccess/rf1/result"&gt;
                        &lt;head&gt;
                            &lt;variable name="o"/&gt;
                        &lt;/head&gt;
                        &lt;results&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122557"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122564"/&gt;
                            &lt;/result&gt;
                            &lt;result&gt;
                                &lt;o uri="info:fedora/si:122571"/&gt;
                            &lt;/result&gt;
                        &lt;/results&gt;
                    &lt;/sparql&gt;
                </simple>
            </setBody>
            -->

            <log message="Query Result - ${body}" />
            <setHeader headerName="FoundObjectPID">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:o/@uri,'/')
                </xpath>
            </setHeader>
            <!-- <log message="Query Result XPath - ${headers.FoundObjectPID}"/> -->
            <setBody><simple>${headers.ManifestXML}</simple></setBody>
            <!-- <log message="Find Object - ${body}"/> -->
            <log message="Finished find object."/>
        </route>
        
        <route id="CameraTrapProcessPlot">
            <from uri="direct:processPlot"/>
            <log message="Started processing plot ..."/>
            <log message="Plot In: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <setHeader headerName="PlotLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//PlotName</xpath>
            </setHeader>
            <setHeader headerName="CamelFedoraLabel">
                <simple>${headers.CamelFedoraLabel}:${headers.PlotLabel}</simple>
            </setHeader>
            <log message="Plot: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <setHeader headerName="ParentPID"><simple>${headers.CamelFedoraPid}</simple></setHeader>
            <to uri="direct:findObject" />
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Plot does not exist"/>
                    <!-- Create CT plot and add it as a sub-concept of the sub-project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- Add Relation from parent CT sub-project to the child CT plot -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- TODO - Add a FGCD-CTPlot datastream with the Title set -->
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-CTPlotTemplate.vsl"/>
                    <to uri="fedora:datastream?name=FGDC-CTPlot&amp;type=text/xml&amp;group=X&amp;versionable=true"/>
                </when>
                <otherwise>
                    <log message="Plot already exists"/>
                </otherwise>
            </choice>
            <log message="Plot End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Plot - ${body}"/> -->
            <log message="Finished processing plot."/>
        </route>
        
        <route id="CameraTrapProcessSubproject">
            <from uri="direct:processSubproject"/>
            <log message="Started processing subproject ..."/>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//SubProjectName</xpath>
            </setHeader>
            <setHeader headerName="ParentPID"><simple>${headers.CamelFedoraPid}</simple></setHeader>
            <log message="Sub-project: Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <to uri="direct:findObject" />
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Sub-project does not exist"/>
                    <!-- Create CT sub-project and add it as a sub-concept of the project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- Add Relation from parent CT project to the child CT sub-project -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- TODO - Add a FGDC-Research datastream with Title set to the Sub-project name -->
                    <to uri="velocity:file:Input/templates/CTPlotFGDC-ResearchTemplate.vsl"/>
                    <to uri="fedora:datastream?name=FGDC-Research&amp;type=text/xml&amp;group=X&amp;versionable=true"/>
                </when>
                <otherwise>
                    <log message="Sub-project already exists"/>
                </otherwise>
            </choice>
            <log message="Sub-Project End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Project - ${body}"/> -->
            <log message="Finished processing subproject."/>
        </route>
        
        <route id="CameraTrapProcessProject">
            <from uri="direct:processProject"/>
            <log message="Started processing project ..."/>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">//ProjectName</xpath>
            </setHeader>
            <setHeader headerName="ParentPID"><simple>${headers.CamelFedoraPid}</simple></setHeader>
            <log message="Label - ${headers.CamelFedoraLabel}  ParentPID - ${headers.CamelFedoraPid}"/>
            <to uri="direct:findObject"/>
            <log message="Found Object PID - ${headers.FoundObjectPID}"/>
            <choice>
                <when>
                    <simple>${headers.FoundObjectPID} == ''</simple>
                    <log message="Project does not exist"/>
                    <!-- Create CT project and add it as a sub-concept of the specified root -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:Input/templates/CTProjectTemplate.vsl"/>
                    <to uri="fedora:datastream?name=RELS-EXT&amp;versionable=false"/>
                    <!-- Add Relation from parent static CT root to the child CT project -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- TODO - Add a EAC-CPF datastream with the Project Name and Abbreviation set -->
                    <to uri="velocity:file:Input/templates/CTProjectEAC-CPFTemplate.vsl"/>
                    <to uri="fedora:datastream?name=EAC-CPF&amp;type=text/xml&amp;group=X&amp;versionable=true"/>
                </when>
                <otherwise>
                    <log message="Project already exists"/>
                </otherwise>
            </choice>
            <log message="Project End - ${headers.CamelFedoraPid}"/>
            <!-- <log message="Project - ${body}"/> -->
            <log message="Finished processing project."/>
        </route>

    </camelContext>
        
</blueprint>